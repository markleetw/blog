<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Programmer RPG</title>
  
  <subtitle>Hack Everything!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.marksylee.com/"/>
  <updated>2020-05-31T05:49:48.161Z</updated>
  <id>http://blog.marksylee.com/</id>
  
  <author>
    <name>marksylee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《生時間》讀書筆記</title>
    <link href="http://blog.marksylee.com/2020/05/31/reading-make-time/"/>
    <id>http://blog.marksylee.com/2020/05/31/reading-make-time/</id>
    <published>2020-05-30T16:11:30.000Z</published>
    <updated>2020-05-31T05:49:48.161Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/05/31/reading-make-time/make-time-cover.jpg" title="Make Time"><p><strong>Author:</strong> Jake Knapp, John Zeratsky<br><strong>EN Name:</strong> Make Time | How to focus on What matters every day<br><strong>ISBN:</strong> 978-986-479-780-6<br><strong>Score /5:</strong> ⭐️⭐️⭐️</p><p><em>說到時間管理，我只服姓羅的！</em></p><a id="more"></a><p>「<strong>時間管理」</strong>一向不是我的強項，過去我總是覺得自己的時間不夠、想做的事情又太多，起初不斷嘗試精進工作效率，但工作和其他雜事對我而言依舊像是黑洞無止盡地吞噬著時間和精力，就算工作提前告終、獲得了一點私人時間，人早已是行屍走肉，充其量不過是個會洗碗的魁儡罷了。所以我從 2019 年開始有意識地對自己進行一些實驗，實驗的內容我就不多說，不過部分實驗結果和本書有些重疊，後面我會再說到。</p><p>會注意到這本書主要是因為兩位作者：Jake Knapp 和 John Zeratsky，是前 Google Venture 的員工，同時也是 Design Sprint 的設計者之二（<em>作者在書中也不斷提醒大家，甚至到有點煩的程度了…</em>），由於本身在 <del> 新創 </del> 電商產業擔任產品經理，對於 Design Sprint 並不陌生，在業內也是頗有討論，也就因此興起對此書的興趣。</p><p>本書內容非常生活化，也提供了很多可以直接取用的素材和案例，如果對於時間管理一無所知，或是從未試圖做過時間管理的人，倒是一本不錯的入門書；不過老實說，很多時候你無法直接套用他們的招式，原因就在於生活環境差太多，隨便舉個例子，他們的工作方式和工時，跟台灣的差異根本是十萬八千里，有些建議做法不太現實，例如：難以專注？提前下班吧！。而且，算一算他們的每日工時大概只有五六個小時呀…</p><p>倒也不能說這本書對我個人沒有價值，它確實提供了些創意和靈感，讓我能夠做一點不同的嘗試，我覺得更重要的是，他幫我把過去已經知道的模糊念頭和想法歸納整理成實際的文字，讓我能夠更具體明確概念，便於將概念應用到其他實踐上。</p><p>以下，我就針對書中有提及的建議和我個人的親身實踐，分享我對於「生時間」這件事的作法。</p><h2 id="如何進行？"><a href="# 如何進行？" class="headerlink" title="如何進行？"></a>如何進行？</h2><ol><li>手錶 ＋ 記憶 ＋ 筆記，<strong>紀錄 </strong> 生活中的關鍵時間點，重點是 <strong> 方法越簡單越好</strong><ul><li>包含：起床、出門、運動、通勤、午休、下班、煮飯、家務、…</li></ul></li><li>以週為單位審視自己的紀錄，觀察一天當中最需要進步的 <strong> 一個時間區塊，別貪心！</strong></li><li>放大該時間區塊中的細節，<strong>盤點 </strong> 期間發生的事情</li><li>如有必要，可以詳細的紀錄該時間區塊內的時間花費，前提是 <strong> 不要造成負擔</strong></li><li>假想一個 <strong> 優化目標</strong>，也就是自己希望優化完成後會變什麼樣子</li><li>針對執行效率和時間分配 <strong> 有意識地 </strong> 進行優化，<strong>定期反省</strong>，隨時調整進行方式和目標</li><li>時間區塊的優化到一段落，可能是目標達成，或是遇到阻礙無法克服，回到 2 再來一輪</li></ol><p>（<em>個人認為時間管理就是生活管理，如果只是為管理而管理，把人生搞得很不舒服，完全沒有必要。對我而言，時間管理是要讓自己的時間運用更游刃有餘、減少時間和生活壓力。）</em></p><h2 id="在過程中時時提醒自己…"><a href="# 在過程中時時提醒自己…" class="headerlink" title="在過程中時時提醒自己…"></a>在過程中時時提醒自己…</h2><ol><li>自己 <strong> 為什麼 </strong> 想要時間管理？生出來的時間 <strong> 打算做什麼？</strong></li><li><strong>有意識 </strong> 地使用時間，而不要被習慣所支配<ul><li>換句話說就是，只做自己知道原因、目標的事情</li><li>舉例：通勤很無聊，有意識地去進行閱讀或聆聽，不要被滑滑滑的習慣支配，當你打開臉書準備滑的時候，問問自己「你希望從中得到什麼？」</li></ul></li><li>不要讓其他人來告訴你、指使你現在該做什麼<ul><li>只有當自己的事情在掌控中，我們才有餘力去幫助別人，帶來更大的影響力</li><li>不要總是有求必應，高效率、快速反應不該只是實踐在別人的優先項目上</li></ul></li><li>不要成為工具使喚的對象<ul><li>管好你的手機、電腦和其他通訊設備，遠離 <a href="https://zh.wikipedia.org/zh-tw/ 错失恐惧症" target="_blank" rel="noopener"> 錯失恐懼症（FOMO)</a><ul><li>只開啟必要的通知</li><li>如果不確定哪些是必要的，全部關掉，當遇到困擾時再逐步打開</li></ul></li></ul></li><li>不要因為你的意識希望放鬆舒壓、休閒娛樂而感到負面<ul><li>時間管理是要實踐一輩子，不可能偶爾想到管理一下，這樣是不會有任何效果，而人類不是機器，總是會需要休息、休閒和嗜好，不需要因為這些理由不夠「正當」而感到慚愧。</li></ul></li></ol><h2 id="選擇每日焦點"><a href="# 選擇每日焦點" class="headerlink" title="選擇每日焦點"></a>選擇每日焦點</h2><ol><li>認清現實吧！事情永遠不會有做完的那天，必須要幫事情 <strong> 設定優先度</strong><ul><li>（<em>我個人會以週為單位列出所有待辦事項，並為這些待辦事項設定優先級）</em></li></ul></li><li>每天挑出三至五件待辦事項來著手進行，並 <strong> 選擇一件成為每日焦點（別貪心）</strong><ul><li>（<em>老實說，我自己會在工作和生活待辦事項各挑一件成為每日焦點，但這不是個好示範，不過這樣會讓我心裡好過點）</em></li></ul></li><li>每日焦點是自己預期會 <strong> 花最多時間心力或最重要的事</strong>，不一定是當天非要完成的事</li><li>在當天的行事曆上 <strong> 預留下一段時間 </strong> 給每日焦點，專心去推進它</li><li>其他非每日焦點的待辦事項並非不重要，只是總要取捨，我們不能榨乾自己，試試看：<ul><li>還是去做，但是做完就收，不要追求完美</li><li>推到其他比較有空擋的時間</li></ul></li></ol><h2 id="控制心流"><a href="# 控制心流" class="headerlink" title="控制心流"></a>控制心流</h2><ol><li><strong>實驗和紀錄 </strong> 你進入心流的狀況，這部分因人而異，讓進入心流成為可以被掌控的流程<ul><li>找到某一張播放清單，成為你的心流 BGM</li><li>特定時段、舒適的位置、光線和身體狀況</li><li>電腦的視窗和介面配置</li></ul></li><li>將工作內容 <strong> 切割 </strong> 成細項可被獨立執行的行動<ul><li>例如：「功能開發」切割成系統設計、程式撰寫、測試（還可以再切得更細）</li></ul></li><li>只在特定時間打開重要通知，把專注力留給每日焦點跟自己身上<ul><li>例如：透過篩選器自動分類 email，並只有特定發信人或關鍵字出現時才會通知</li><li>例如：善用請勿打擾（Do Not Disturb）模式</li></ul></li><li>重新設計你的慣用軟體及服務，並創造分心的障礙<ul><li>例如：不在工作電腦登入臉書，且專注時手機倒扣在桌上</li></ul></li><li>用手錶取代手機，不要讓「看時間」創造分心的機會</li><li>不要帶著手機進入會議室，如果會議低效或沒有實質幫助，提出你的想法或離開會議</li><li>不要把 email 當作待辦事項，不要急著回覆或閱讀，每天分配一個固定時間給它</li><li>把超過一年的電子郵件刪除，或是歸檔後刪除（如果他很重要的話）</li><li>任何想法或同事突然冒出打斷，先簡單筆記下來然後拋到腦後</li></ol><h2 id="小心凝視深淵"><a href="# 小心凝視深淵" class="headerlink" title="小心凝視深淵"></a>小心凝視深淵</h2><ol><li>新聞、PTT、臉書、IG、Twitter、Youtube、Hacker News、Reddit…<ul><li>它們是精神時光屋</li></ul></li><li>訂閱制影音串流、包月 / 季遊戲、任何你覺得不用就會浪費的東西<ul><li>因為你很可能是為用而用</li></ul></li></ol><h2 id="照顧自己的身體（老生常談可以跳過）"><a href="# 照顧自己的身體（老生常談可以跳過）" class="headerlink" title="照顧自己的身體（老生常談可以跳過）"></a>照顧自己的身體（老生常談可以跳過）</h2><ol><li>在乎自己吃進的東西</li><li>注意身體對食物的反應<ul><li>例如：吃什麼會胃食道逆流</li></ul></li><li>善用咖啡因<ul><li>例如：測試自己幾點喝咖啡效果最好</li></ul></li><li>強迫休息</li><li>養成運動的習慣</li><li>試著冥想<ul><li>（<em>這對我來說似乎真的很有效）</em></li></ul></li></ol><h2 id="重視反省"><a href="# 重視反省" class="headerlink" title="重視反省"></a>重視反省</h2><ul><li>每天在睡前撥出時間反省，反省內容不論好壞都可以，好的維持，壞的明日改進</li><li>這邊的另一項重點是 <strong> 每天留下與自己對話的時間</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2020/05/31/reading-make-time/make-time-cover.jpg&quot; title=&quot;Make Time&quot;&gt;

&lt;p&gt;&lt;strong&gt;Author:&lt;/strong&gt; Jake Knapp, John Zeratsky&lt;br&gt;&lt;strong&gt;EN Name:&lt;/strong&gt; Make Time | How to focus on What matters every day&lt;br&gt;&lt;strong&gt;ISBN:&lt;/strong&gt; 978-986-479-780-6&lt;br&gt;&lt;strong&gt;Score /5:&lt;/strong&gt; ⭐️⭐️⭐️&lt;/p&gt;
&lt;p&gt;&lt;em&gt;說到時間管理，我只服姓羅的！&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="http://blog.marksylee.com/categories/Reading/"/>
    
    
      <category term="productivity" scheme="http://blog.marksylee.com/tags/productivity/"/>
    
  </entry>
  
  <entry>
    <title>MarBot Ch. 1 - Listen To Mother&#39;s Words</title>
    <link href="http://blog.marksylee.com/2017/12/09/marbot-ch1-listen-to-mothers-words/"/>
    <id>http://blog.marksylee.com/2017/12/09/marbot-ch1-listen-to-mothers-words/</id>
    <published>2017-12-09T14:10:45.000Z</published>
    <updated>2020-05-31T05:49:48.149Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/12/09/marbot-ch1-listen-to-mothers-words/orianthi-panagaris.jpg" title="Orianthi Panagaris"><p>你是否有在通訊軟體 LINE 上被長輩騷擾的經驗呢？</p><p>隨著智慧型手機的普及，長輩們使用通訊軟體、社群網站也越來越常見，但是隨之而來的各種假新聞分享、早安圖、午安圖、晚安圖、宵夜圖、感恩圖以及已讀不回躁鬱症，是否讓你深感困擾？</p><p>接下來一系列的文章，你將學會如何自製一套媽寶機器人，讓你能夠輕鬆地開發出強勁的功能，如極速秒讀、智能敷衍回訊、定時問候語（問候圖），促使家庭氛圍和樂，解決以上提到的所有煩惱，更重要的是，不需要花到你一毛錢！（如果有很多個媽媽則另當別論）</p><p><em>媽寶的原名是 MarBot，也就是 Mark’s Bot 的簡寫啦！</em></p><p><strong>這一章節將介紹如何建立自己的機器人，並讓它成為長輩的應聲蟲。</strong></p><blockquote><p>請注意！因為篇幅有限，此系列無法針對每一項技術做詳盡的說明，僅能介紹開發過程中必備的知識。</p></blockquote><a id="more"></a><hr><blockquote><p>先來首 BGM 吧！</p><div class="video-container"><iframe src="//www.youtube.com/embed/9CRaXkB1EaE" frameborder="0" allowfullscreen></iframe></div></blockquote><h2 id="在開始之前，必須要做一些事前準備："><a href="# 在開始之前，必須要做一些事前準備：" class="headerlink" title="在開始之前，必須要做一些事前準備："></a>在開始之前，必須要做一些事前準備：</h2><ol><li>註冊 LINE@ 帳號</li><li>建立開發和部署環境<ul><li>Python</li><li>Heroku &amp; Git</li></ul></li></ol><hr><h2 id="註冊 -LINE＠- 帳號"><a href="# 註冊 -LINE＠- 帳號" class="headerlink" title="註冊 LINE＠ 帳號"></a>註冊 LINE＠ 帳號 </h2><p> 其實 LINE 機器人的基本概念並不複雜，簡而言之就是使用 LINE@ 帳號所提供的 Message API 來做到自動接受和發送訊息的功能。當 LINE@ 帳號接收到好友傳來的訊息，Message API 便會將訊息傳送至你所設定的網路服務（機器人）位址，而機器人就可以針對訊息的內容，來決定該如何回覆。</p><p>LINE@ 就像是粉絲團、公眾號，你能夠透過 LINE@ 帳號與使用者交談、主動發送訊息，以誘騙年長者加好友送貼圖為最常見的應用。而 LINE@ 帳號的申請幾乎可以說是沒有門檻，只要你有 LINE 帳號就行了。</p><blockquote><p>LINE@ 帳號跟一般的 LINE 帳號是完全分開的，但因為 LINE@ 帳號並不需要設定密碼，而是透過 LINE 帳號作為管理員進行登入，所以在此才使用自己的 LINE 帳號來進行申請。</p><p>如果你還想知道更多關於 LINE@ 的資訊，請前往 <a href="http://at.line.me/tw/" target="_blank" rel="noopener"> 官方網站</a>。</p></blockquote><ol><li><p>首先進入 <a href="https://entry-at.line.me/" target="_blank" rel="noopener">LINE@ 註冊頁面 </a> 點選<strong> 開始使用一般帳號</strong></p></li><li><p>登入你個人的 LINE 帳號</p></li><li><p>跟著步驟填入所需的資料</p><blockquote><ul><li><p>請不用擔心，本文所介紹的 LINE 機器人製作方式是完全免費的（<strong>Developer Trial</strong>或 <strong> 免費版 </strong>），當然你可以隨時根據自己的需求更改為付費方案，但是基本上，進階的付費功能主要是提供給商業用戶使用，你可以查看<a href="http://at.line.me/tw/plan" target="_blank" rel="noopener">LINE@方案介紹</a> 了解更多詳情。</p></li><li><p>因為帳號申請的過程全都有中文說明，照理說應不會遇到困難，但若是需要更詳盡的申請教學，可以參閱 <a href="http://at-blog.line.me/tw/archives/58236627.html" target="_blank" rel="noopener">LINE 官方部落格的教學文章</a>。</p></li></ul></blockquote></li><li><p>申請完 LINE@ 帳號後，便可以從 <a href="https://entry-at.line.me/" target="_blank" rel="noopener"> 官網 </a> 點選右上方的 <strong> 管理後台</strong>，使用私人 LINE 帳號登入。</p> <img src="/2017/12/09/marbot-ch1-listen-to-mothers-words/line@-panel.png" title="LINE@ 管理後台"></li><li><p>進入 LINE@ 後台管理介面後，可以在下方的 <strong> 帳號一覽 </strong> 中，看到剛剛所申請的 LINE@ 帳號，點選該帳號後，就可以開始對它進行設定。</p> <img src="/2017/12/09/marbot-ch1-listen-to-mothers-words/line@-dashboard.png" title="LINE@ 帳號一覽"></li><li><p>為了取信長輩，必須讓 LINE@ 帳號看起來像是個普通私人帳號，所以請先至「帳號管理 &gt; 基本設定」修改帳號名稱、顯示圖片、狀態等等，讓 LINE@ 帳號看起來像是你的私人帳號。</p> <img src="/2017/12/09/marbot-ch1-listen-to-mothers-words/line@-general-settings.png" title="基本設定"></li></ol><p>至此，LINE@ 的設定暫時告一段落。</p><hr><h2 id="建立開發和部署環境"><a href="# 建立開發和部署環境" class="headerlink" title="建立開發和部署環境"></a>建立開發和部署環境 </h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p> 本系列介紹的機器人開發，是使用 Python 作為主要開發語言，因本篇的主旨並非 Python 教學，所以我只會快速帶過，不再做詳盡的解說，以介紹步驟為主。</p><ul><li><p><strong>Windows</strong></p><p>  首先前往 <a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">Python 官網 </a> ，根據你目前使用的 OS，選擇 <strong>Windows x86 executable installer</strong>（32bit） 或 <strong>Windows x86-64 executable installer</strong>（64bit） 進行下載和安裝。<strong> 請特別注意</strong>，在安裝時請勾選 <strong>Add Python to PATH</strong> 這個選項。</p><p>  <em>進階：可以使用 MIT 的 Python 版本管理工具 <a href="https://gist.github.com/uranusjr/91969cb2826d11d8e9e8f636b9ac1b97" target="_blank" rel="noopener">SNAFU</a>。</em></p></li><li><p><strong>macOS</strong></p><p>  在 macOS 上，我會建議使用 <a href="https://brew.sh/index_zh-tw.html" target="_blank" rel="noopener">Homebrew</a> 來安裝 Python，可以方便、快速的安裝、升級、刪除任何你所需要的套件、工具。</p><p>  官方網站已有詳細的 <a href="https://brew.sh/index_zh-tw.html" target="_blank" rel="noopener"> 中文教學</a>，根據教學步驟安裝完之後，請在終端機輸入</p><p>  <code>brew install python3</code></p><p>  <em>進階：可以使用 Python 管理工具 <a href="https://github.com/pyenv/pyenv" target="_blank" rel="noopener">pyenv</a> 或 <a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener">pipenv</a>。</em></p></li><li><p><strong>Linux</strong></p><p>  Linux 的用戶應該不需要我教如何安裝 Python 了（懶）。</p></li></ul><blockquote><p>環境建置是一個非常枯燥、佔用篇幅且意外狀況很多的部分，所以我不打算教得太深入，以能夠解決大多數狀況為主，所以如果你是 Python 新手，在沒有人指導或是資訊基礎的情況下，不建議直接使用 <strong> 進階 </strong> 的工具，很容易因為不熟悉而產生錯誤引起挫敗感。如果在過程中有遇到任何問題，歡迎在下方留言，我會盡力幫忙。</p></blockquote><p>至此，Python 應該已經安裝完成了，為了驗證是否可以使用 Python，請打開 <strong> 終端機 </strong> 或<strong>命令提示字元</strong>，輸入</p><p><code>python3 --version</code></p><p>如果有回覆</p><p><code>Python 3.6.3</code></p><p>恭喜你，可以進行下一步了。</p><blockquote><p>Windows 用戶請注意，安裝任何軟體（包含 Python 和後面會介紹的所有工具），安裝完後都必須要重新開啟命令提示字元，指令才能正常生效喔！</p></blockquote><h3 id="Heroku-amp-Git"><a href="#Heroku-amp-Git" class="headerlink" title="Heroku &amp; Git"></a>Heroku &amp; Git</h3><p>Heroku 是一套 PaaS 雲端服務平台，讓使用者可以快速部署服務（程式）到雲端上，除了簡單易用之外，更重要的是，它所提供的免費方案完全能夠滿足媽寶機器人的需求。</p><ol><li><p>前往 <a href="https://signup.heroku.com/" target="_blank" rel="noopener">Heroku 的官網 </a> 註冊帳號，註冊方式非常簡單，只需要填寫基本資料就可以了，完全不需要填寫信用卡等財務相關資訊。</p> <img src="/2017/12/09/marbot-ch1-listen-to-mothers-words/heroku-register.png" title="Heroku Sign up"></li><li><p>送出註冊表格後，應會收到系統發出的認證信，認證後便完成了帳號註冊。</p></li><li><p>接下來就可以建立一套屬於自己的服務。首先前往 <a href="https://dashboard.heroku.com/apps" target="_blank" rel="noopener">Heroku</a> 登入剛剛所申請的帳號，在首次登入時，因為我們未曾建立過任何服務，所以會看到以下的畫面。</p> <img src="/2017/12/09/marbot-ch1-listen-to-mothers-words/heroku-onboarding.png" title="Heroku Onboarding"></li><li><p>點選 <strong>Create New App</strong>，並依照提示輸入 App name 和選擇 US 後點選 <strong>Create app</strong> 送出。</p> <img src="/2017/12/09/marbot-ch1-listen-to-mothers-words/heroku-create-new-app.png" title="Create New App"></li><li><p>就這麼簡單，我們已經建立好一個空服務了！網頁會自動將你導向簡易的說明頁面，建議你可以快速地閱讀它，我知道你可能會看得一頭霧水，別擔心，繼續跟著後面的步驟做吧！</p> <img src="/2017/12/09/marbot-ch1-listen-to-mothers-words/heroku-deploy-page.png" title="Heroku Deploy Page"></li><li><p>接下來要安裝 Heroku Cli，它是一套 Heroku 管理工具，簡單來說是可以讓你可以下指令去命令電腦把服務（機器人）部署上 Heroku、查看服務狀態等等。</p><p> 根據系統不同而有不同的安裝方式，詳情請參閱 <a href="https://devcenter.heroku.com/articles/heroku-cli" target="_blank" rel="noopener"> 官方說明 </a>。基本上類似於 Python 安裝方式，Ｗindows <a href="https://devcenter.heroku.com/articles/heroku-cli#windows" target="_blank" rel="noopener"> 在此選擇 </a> 32bit 或 64bit 安裝檔下載安裝。而 macOS 則是<a href="https://devcenter.heroku.com/articles/heroku-cli#macos" target="_blank" rel="noopener"> 建議 </a> 使用 Homebrew 來進行安裝，指令如下：</p><p> <code>brew install heroku/brew/heroku</code></p></li><li><p>安裝完 Heroku Cli 之後，便可以登入剛剛申請的帳號，只要在 <strong> 終端機 </strong> 或<strong>命令提示字元 </strong> 輸入 <code>heroku login</code> 並根據提示輸入帳號密碼即可。</p></li><li><p>最後，需要安裝開發者必備的版本控管工具 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>。在此安裝 Git 的目的並非只是為了版本控管，而是 Heroku Cli 在部分操作上需要與 Git 配合，後面會再解說。</p><p> 安裝的步驟就不再贅述，Windows 一樣前往 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener"> 頁面 </a> 選擇對應的版本來下載安裝(如果看不懂可以先按 Next 到底）；而 macOS 用戶則使用 Homebrew（知道它有多方便了吧！），指令我想你應該也猜得出來了。</p><p> <code>brew install git</code></p></li></ol><p>恭喜你，環境建置終於結束啦！</p><hr><h2 id="正式進入開發"><a href="# 正式進入開發" class="headerlink" title="正式進入開發"></a>正式進入開發</h2><blockquote><p>將以下指令內的 <code>your-app-name</code> 改為 Heroku 上的 App name</p></blockquote><ol><li><p>首先找個風水寶地將我們先前建立的 Heroku 服務下載下來</p><ul><li><p><strong>Windows</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\mark&gt; D:</span><br><span class="line">D:\&gt; heroku git:clone --app your-app-name</span><br></pre></td></tr></table></figure></li><li><p><strong>macOS / Linux</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ cd ~/Documents</span><br><span class="line">~/Document$ heroku git:clone --app you-app-name</span><br></pre></td></tr></table></figure></li></ul></li><li><p>執行完後，此時你的目錄下會多出一個 <code>your-app-name</code> 的資料夾</p></li><li><p>在資料夾下建立四個檔案，分別是</p><ul><li>runtime.txt</li><li>requirements.txt</li><li>Procfile</li><li>your-app-name.py</li></ul></li><li><p>此時你的檔案結構應該會 <strong> 類似 </strong> 這樣</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\marbot-demo （或 ~/Documents/marbot-demo）</span><br><span class="line">    - runtime.txt</span><br><span class="line">    - requirements.txt</span><br><span class="line">    - marbot-demo.py</span><br><span class="line">    - Procfile</span><br></pre></td></tr></table></figure></li><li><p>編輯 <strong>runtime.txt</strong>，使其內容如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python-3.6.3</span><br></pre></td></tr></table></figure><p>這邊應該不難理解，就是讓 Heroku 知道你的程式是用 Python 3.6.3 版所撰寫，Heroku 會在部署時將 Python 環境準備好。</p></li><li><p>編輯 <strong>requiremenst.txt</strong>，使其內容如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flask==0.12</span><br><span class="line">gunicorn==19.6.0</span><br><span class="line">line-bot-sdk==1.5.0</span><br></pre></td></tr></table></figure><p>這邊是列出機器人所需要的三個套件，前兩個建立 Python 網路服務的基本套件，Flask 是一套輕量級的 WEB 框架，而 gunicorn 則是 Python WSGI HTTP Server，第三項則是 LINE 官方所提供的 Python 開發套件（看不懂沒關係，不影響開發，未來有機會再介紹）。</p></li><li><p>編輯 <strong>Procfile</strong>，使其內容如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web gunicorn your-app-name:app</span><br></pre></td></tr></table></figure><p> 這邊是告訴 Heroku，你建立的網路服務是跑在 gunicorn Server 上，且主程式為 <code>your-app-name</code>。請注意，必須要跟 <strong>your-app-name.py</strong> 同檔名。</p></li><li><p>最後，就是我們的主角 <strong>your-app-name.py</strong> 啦！</p><p> 因為篇幅較長，我將簡單的說明寫在註解內，如果看不懂也可以直接跳過閱讀，先讓機器人上線再說。</p> <script src="https://gist-it.appspot.com/github/marksylee/marbot-demo/blob/ch1-listen-to-mothers-words/marbot-demo.py"></script></li></ol><blockquote><p>如果對於這四支檔案還有任何疑惑，請至 <a href="https://github.com/marksylee/marbot-demo/tree/ch1-listen-to-mothers-words" target="_blank" rel="noopener"> 這裡 </a> 觀看實際範例，或是在下方留言詢問。</p></blockquote><hr><h2 id="部署 -Heroku- 以及串接 -Message-API"><a href="# 部署 -Heroku- 以及串接 -Message-API" class="headerlink" title="部署 Heroku 以及串接 Message API"></a>部署 Heroku 以及串接 Message API</h2><ol><li><p>首先，請回到 <a href="https://admin-official.line.me" target="_blank" rel="noopener">LINE@ 後台管理頁面 </a> 並點選 LINE@ 帳號，進入「帳號設定 &gt; Message API 設定」。由於你的 LINE@ 帳號尚未開通 Message API，請先按照網頁指示啟用後，點擊進入最下方的 <strong>LINE Developers</strong>。</p> <img src="/2017/12/09/marbot-ch1-listen-to-mothers-words/line@-message-api-settings.png" title="Message API 設定"></li><li><p>進入 LINE Developers，會看到一系列的 Channel Settings 設定。請依照指示填入資料，但其中有幾個部分特別重要：</p> <img src="/2017/12/09/marbot-ch1-listen-to-mothers-words/line@-channel-settings.png" title="Channel Settings"><ul><li><p><strong>Plan</strong><br>  有 Developer Trial 和 Free 可供選擇，它們之間的差異在網頁上已有說明。Developer Trial 可以主動發送訊息給使用者，但最多只能擁有 50 位好友；Free 方案可以有無限多的好友，但無法主動發送訊息給使用者（換句話說：只能回嘴，不能主動問候）。如果僅是自娛娛人，建議使用 Developer Trial 可以享受到比較豐富的功能。</p></li><li><p><strong>Channel secret</strong><br>  這是機器人是否能 <strong> 接收並解讀</strong> Message API 資料的關鍵，請將它妥善保存並將它取代 <strong>your-app-name.py</strong> 內的 <code>LINEBOT_CHANNEL_SECRET</code>。</p></li><li><p><strong>Channel access token</strong><br>  這是機器人用來 <strong> 發送、回覆訊息 </strong> 的密鑰，請按下右方的 <strong>ISSUE</strong> 申請一組新密鑰，並選擇是否讓它定時過期（過期就必須重新申請），取得後請妥善保存並將它取代 <strong>your-app-name.py</strong> 內的 <code>LINEBOT_CHANNEL_ACCESS_TOKEN</code>。</p></li><li><p><strong>Use webhooks</strong><br>  當 LINE@ 收到訊息時，是否將訊息傳送至指定服務（機器人），請修改設定為 <strong>Enabled</strong>。</p></li><li><p><strong>Webhook URL</strong><br>  此設定與上一個相關，當 <strong>Use webhooks</strong> 啟動時，Message API 會將訊息傳送至 <strong>Webhook URL</strong>，請填入<br>  <code>https://your-app-name.herokuapp.com/callback</code><br>  （切記將 your-app-name 改為你在 Heroku 所設定的 App name）</p></li><li><p><strong>Allow bot to join group chats</strong><br>  媽寶機器人是否可以被加入群組聊天，請依需求自行決定是否要啟動。</p></li><li><p><strong>Auto-reply messages</strong> 和 <strong>Greeting messages</strong><br>  兩者皆設定為 <strong>Disabled</strong>。</p></li><li><p><strong>QR code</strong><br>  顧名思義就是 LINE@ 的 QR code，掃描後就可以加入好友。</p></li></ul></li><li><p>修改完資料後，請先別急著關閉頁面。回到終端機或命令提示字元，將路徑移動至專案路徑下</p><ul><li><p>Windows</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\mark&gt; D:</span><br><span class="line">D:\&gt; cd your-app-name</span><br></pre></td></tr></table></figure></li><li><p>macOS / Linux</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ cd ~/Documents/your-app-name</span><br></pre></td></tr></table></figure></li></ul></li><li><p>依序執行以下指令，將機器人部署至 Heroku</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;first commit&apos;</span><br><span class="line">git push heroku master:master</span><br></pre></td></tr></table></figure></li><li><p>等待 Heroku 部署完後，回到剛剛的 LINE Developers 頁面，按下 <strong>Webhook URL</strong> 旁的 <strong>Verify</strong>。如果機器人有部署成功，應會出現 <strong>Success</strong> 字樣。</p></li><li><p>將 LINE@ QR code 分享給他人（也可以自己使用），並開始享受清靜的時光吧！</p></li></ol><img src="/2017/12/09/marbot-ch1-listen-to-mothers-words/marbot-demo.png" title="DEMO"><h3 id="真是…真是太棒了…"><a href="# 真是…真是太棒了…" class="headerlink" title="真是…真是太棒了…"></a>真是…真是太棒了…</h3><hr><blockquote><ul><li><p>第一次寫如此長篇的教學，可能有所遺漏，請不吝指教！</p></li><li><p>應該沒有人會真的拿這個機器人去唬弄長輩吧…</p></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/12/09/marbot-ch1-listen-to-mothers-words/orianthi-panagaris.jpg&quot; title=&quot;Orianthi Panagaris&quot;&gt;

&lt;p&gt;你是否有在通訊軟體 LINE 上被長輩騷擾的經驗呢？&lt;/p&gt;
&lt;p&gt;隨著智慧型手機的普及，長輩們使用通訊軟體、社群網站也越來越常見，但是隨之而來的各種假新聞分享、早安圖、午安圖、晚安圖、宵夜圖、感恩圖以及已讀不回躁鬱症，是否讓你深感困擾？&lt;/p&gt;
&lt;p&gt;接下來一系列的文章，你將學會如何自製一套媽寶機器人，讓你能夠輕鬆地開發出強勁的功能，如極速秒讀、智能敷衍回訊、定時問候語（問候圖），促使家庭氛圍和樂，解決以上提到的所有煩惱，更重要的是，不需要花到你一毛錢！（如果有很多個媽媽則另當別論）&lt;/p&gt;
&lt;p&gt;&lt;em&gt;媽寶的原名是 MarBot，也就是 Mark’s Bot 的簡寫啦！&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;這一章節將介紹如何建立自己的機器人，並讓它成為長輩的應聲蟲。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;請注意！因為篇幅有限，此系列無法針對每一項技術做詳盡的說明，僅能介紹開發過程中必備的知識。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MarBot" scheme="http://blog.marksylee.com/categories/MarBot/"/>
    
    
      <category term="chatbot" scheme="http://blog.marksylee.com/tags/chatbot/"/>
    
      <category term="linebot" scheme="http://blog.marksylee.com/tags/linebot/"/>
    
      <category term="heroku" scheme="http://blog.marksylee.com/tags/heroku/"/>
    
      <category term="python" scheme="http://blog.marksylee.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Shebang：*nix 的使用預設程式執行</title>
    <link href="http://blog.marksylee.com/2017/10/13/shebang-the-default-command-for-file/"/>
    <id>http://blog.marksylee.com/2017/10/13/shebang-the-default-command-for-file/</id>
    <published>2017-10-12T16:36:09.000Z</published>
    <updated>2020-05-31T05:49:48.162Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/10/13/shebang-the-default-command-for-file/tosin-abasi.jpg" title="Tosin Abasi"><p>在 Windows 的世界，我們可以針對不同的檔案類型選擇預設的執行程式，例如 CSV 檔可以設定自動使用 Microsoft Office Excel 開啟，一旦設定好，只需要對著檔案連點兩下就會自動打開 Excel 讀取檔案。</p><p>在 <a href="https://zh.wikipedia.org/wiki/%E7%B1%BBUnix%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener"> 類 Unix 系統 </a> 裡（或稱 *nix，包含 Linux、macOS 等等）其實也有類似的功能，稱為 <a href="https://zh.wikipedia.org/wiki/Shebang" target="_blank" rel="noopener">Shebang</a>（或稱 Hashbang），不同的是，Shebang 是針對各個檔案來設定，而非特定檔案類型。</p><a id="more"></a><p>Shebang 通常寫在檔案的第一行，以 <code>#!</code> 為開頭，加上希望用來開啟此檔案的指令（絕對路徑）。</p><blockquote><p>Unix 術語中，井號通常稱為 sharp、hash 或 mesh，驚嘆號則為 bang，Shebang 這個名稱也是由此而來。</p></blockquote><p>舉例來說，假設你在 Python 檔案的第一行加上這樣的 Shebang：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br></pre></td></tr></table></figure><p>此時在命令行輸入 <code>./test.py</code> 會等價於 <code>/usr/bin/python test.py</code>。</p><p>當然，如果你有特別想要指定的 Python 直譯器或是其他用來開啟檔案的指令，可以將 Shebang 的路徑改成：</p><ul><li>用指定的 Python 直譯器執行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/where/is/your/python</span></span><br></pre></td></tr></table></figure><ul><li>用 <a href="https://zh.wikipedia.org/zh-tw/Vi" target="_blank" rel="noopener">vi</a> 編輯器開啟</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/where/is/your/vi</span></span><br></pre></td></tr></table></figure><ul><li>一般來說，最通用的 Shebang 為（以 <code>python</code> 為例）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br></pre></td></tr></table></figure><blockquote><p>Shebang 僅會在直接開啟檔案時作用，有指名開啟程式的情況下是沒有用的，例如 <code>python test.py</code> 或 <code>vi test.py</code>。</p></blockquote><h3 id="為什麼是 -usr-bin-env-？"><a href="# 為什麼是 -usr-bin-env-？" class="headerlink" title="為什麼是 /usr/bin/env ？"></a>為什麼是 /usr/bin/env ？</h3><p>由於每個人的安裝習慣不同、不同平台的慣例也不同，就像有的人喜歡把軟體裝在 C 槽、把影片放在 D 槽，甚至有的人還會根據類型分門別類地放在不同資料夾底下，我們很難保證 Python 會被安裝在某個固定的位置，如果我們在 Shebang 內將路徑寫死，那會變得很沒彈性。</p><p><code>env</code> 是一套環境變數相關工具（絕對位置是 <code>/usr/bin/env</code>），在 CLI 僅輸入 <code>env</code> 時會列出當下所有環境變數，而輸入 <code>env command</code> 時會執行在 <code>PATH</code> 內找到的 <strong> 第一個</strong> <code>command</code> 。</p><p>也就是說，在 Shebang 設定為 <code>#!/usr/bin/env python</code> 的情況下，無論使用者將 Python 安裝在什麼地方，都會預設使用 <code>PATH</code> 內第一個 <code>python</code> 作為執行指令。</p><p>但是這樣做真的好嗎？</p><p>確實，這個做法可以很輕易地做到跨平台、使用者，不需要去理會各種 Python 安裝路徑，但是缺點也是顯而易見的：首先，我們無法保證 <code>PATH</code> 內的第一個 <code>python</code> 指令就是該使用者慣用或期望使用的指令，或許他常用的 <code>python</code> 直譯器是在 <code>PATH</code> 內的第二或是第三順位，甚至是根本不在 <code>PATH</code> 內；其次，使用 <code>env python</code> 就無法對 Python 直譯器下參數，不過一般來說，這問題對於 Python 這個語言影響並不大。</p><p>其實 Shebang 並非必要的，僅是一個方便的選擇，知道以上的優缺點後，要不要加 Shebang？加什麼 Shebang？就要由開發者自行斟酌囉！</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/10/13/shebang-the-default-command-for-file/tosin-abasi.jpg&quot; title=&quot;Tosin Abasi&quot;&gt;

&lt;p&gt;在 Windows 的世界，我們可以針對不同的檔案類型選擇預設的執行程式，例如 CSV 檔可以設定自動使用 Microsoft Office Excel 開啟，一旦設定好，只需要對著檔案連點兩下就會自動打開 Excel 讀取檔案。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%B1%BBUnix%E7%B3%BB%E7%BB%9F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;類 Unix 系統&lt;/a&gt;裡（或稱 *nix，包含 Linux、macOS 等等）其實也有類似的功能，稱為 &lt;a href=&quot;https://zh.wikipedia.org/wiki/Shebang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Shebang&lt;/a&gt;（或稱 Hashbang），不同的是，Shebang 是針對各個檔案來設定，而非特定檔案類型。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="Linux" scheme="http://blog.marksylee.com/categories/Technique/Linux/"/>
    
    
      <category term="python" scheme="http://blog.marksylee.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Structures and Architectures for Optimizing Database (EN)</title>
    <link href="http://blog.marksylee.com/2017/01/28/structures-n-architectures-for-optimizing-database-en/"/>
    <id>http://blog.marksylee.com/2017/01/28/structures-n-architectures-for-optimizing-database-en/</id>
    <published>2017-01-27T16:44:03.000Z</published>
    <updated>2020-05-31T05:49:48.170Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/01/28/structures-n-architectures-for-optimizing-database-en/b-b-king.jpg" title="B.B. King"><p>Recently, I read the <strong>XtraDB</strong> part of <strong>Percona Server</strong> document roughly, in this process, I realized my huge lack of basic database knowledge, so it’s inevitable to spend a lot of time on clarifying many concepts which have been mentioned several times in the doc. </p><p>In the meanwhile, I found out that there’s so much incorrect and ambiguous information on the internet, for the greater good, it could be great if I organize these all materials and post them on this blog. This article contain a few MySQL only usage, but it’s won’t cut down the readability for the reader who is not familiar with MySQL (perhaps…).</p><p>Why use English? Due to most of the info I collect are written in English and I don’t have enough time to translate them. But don’t worry, I’ll post a Chinese version someday.</p><a id="more"></a><h1 id="Brief-Intro"><a href="#Brief-Intro" class="headerlink" title="Brief Intro"></a>Brief Intro</h1><p>As data growth, the performance of database server will become worse gradually. When there are only hundreds of rows in a table, we basically don’t need to care about the quality of query statements, but once a query involves hundred of thousand of rows, that could be an issue.</p><p>To ease this problem, MySQL 5.7 provides the <code>MAX_EXECUTE_TIME</code> feature to avoid your query sucks. <a href="https://dev.mysql.com/doc/refman/5.7/en/optimizer-hints.html#optimizer-hints-execution-time" target="_blank" rel="noopener">(more)</a></p><p>But what if we have hundred of millions of data in the server? That won’t be that simple. Fortunately, developers have multiple ways to deal with performance problems.</p><hr><h1 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h1><p><strong>Partition</strong> is the way to split the data of a table into multiple tables by rows or columns, according to different divides, it can be classified into <strong>Horizontal Partition</strong> and <strong>Vertical Partition</strong>. </p><h3 id="Horizontal-Partition"><a href="#Horizontal-Partition" class="headerlink" title="Horizontal Partition"></a>Horizontal Partition</h3><img src="/2017/01/28/structures-n-architectures-for-optimizing-database-en/horizontal_partition.png" title="Horizontal Partition"><h3 id="Vertical-Partition"><a href="#Vertical-Partition" class="headerlink" title="Vertical Partition"></a>Vertical Partition</h3><p><em>(<a href="https://dev.mysql.com/doc/refman/5.7/en/partitioning-types.html" target="_blank" rel="noopener">MySQL</a> 5.7 does <strong>not</strong> support it)</em></p><img src="/2017/01/28/structures-n-architectures-for-optimizing-database-en/vertical_partition.png" title="Vertical Partition"><p>Obviously, <strong>Partition</strong> can reduce the effort of querying the tables with fewer indexes and the amounts of data, but the shortcomings are also evident:</p><ol><li>Developers need to spend more resources to maintain the data.</li><li>The capability of execution is the bottleneck because there’s still one server deals with all commands.</li><li>Almost zero benefit for operations of whole table select, insert, update and delete.</li></ol><hr><h1 id="Sharding"><a href="#Sharding" class="headerlink" title="Sharding"></a>Sharding</h1><blockquote><p>A database shard is a horizontal partition of data in a database.<br>– Wikipedia, “<a href="https://en.wikipedia.org/wiki/Shard_%28database_architecture%29" target="_blank" rel="noopener">Shard (database architecture)</a>“</p></blockquote><p><strong>Sharding</strong> is a type of <strong>horizontal partition</strong>, the rows in a table will be separated into multiple tables, and the most important is, these tables will be stored on the different servers. So it’s possible that the system needs to get <code>order</code> data of <code>user_A</code> from <code>DB_01</code> and <code>user_B</code> from <code>DB_02</code>. </p><p><img src="http://www.cubrid.org/manual/91/en/_images/image39.png" alt="Sharding"></p><p>Some articles say that <strong>Sharding</strong> is <strong>Horizontal Partition</strong> and <strong>Horizontal Partition</strong> is <strong>Sharding</strong>, but it’s not perfectly true because the <strong>Horizontal Partition</strong> describes the data in a large table is divided by rows and stored in the multiple relative small tables whether in the same or different server(s).</p><p>Like the cons of <strong>Partition</strong>, although <strong>Sharding</strong> solves the bottleneck of execution capability through multiple machines collaboration, it leads to the data scattered in the different tables of various database servers, so it’s still a pain in the ass to maintain these shards.</p><hr><h1 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h1><p>Database <strong>Replication</strong> is a mechanism of automatically copying the data from a database to another one. With database <strong>Replication</strong>, it’s much easier to have multiple database servers provide service to meet the increasing demands.</p><h3 id="Roles"><a href="#Roles" class="headerlink" title="Roles"></a>Roles</h3><p>There are two roles in the database <strong>Replication</strong>:</p><ol><li><strong>Master Server</strong> is available to handle both read and write (CRUD) operations, and the data in master will replicate to slave(s).</li><li><strong>Slave Server</strong> can only read the data from its disk.</li></ol><p>Since the data in <strong>Slave Server</strong> is synchronized from <strong>Master Server</strong>, it could cause some serious consistency problems. When the data updated in <strong>Master Server</strong> and the replication hasn’t performed or is performing, the user may get old data from <strong>Slave Server</strong>.</p><h3 id="Topology-for-Database-Replication"><a href="#Topology-for-Database-Replication" class="headerlink" title="Topology for Database Replication"></a>Topology for Database Replication</h3><p>Here come some common relationships for database <strong>Replication</strong>.</p><ol><li><p>Master/Slave(s)<br><img src="http://www.cubrid.org/files/attach/images/185528/671/186/image004.png" alt="Master-Slave Replication"></p></li><li><p>Master/Master<br><img src="https://severalnines.com/sites/default/files/resources/tutorials/mysql-replication-tutorial/image13.png" alt="Master-Master Replication"></p></li><li><p>Others <em><a href="http://severalnines.com/resources/tutorials/mysql-replication-high-availability-tutorial" target="_blank" rel="noopener">(more)</a></em><br>ex. Multi-Source Replication<br><img src="https://severalnines.com/sites/default/files/resources/tutorials/mysql-replication-tutorial/image15.png" alt="Multi-Source Replication"></p></li></ol><ul><li>Check <a href="https://www.percona.com/blog/2013/01/09/how-does-mysql-replication-really-work/" target="_blank" rel="noopener">this</a> if you’re curious how does MySQL replication work.</li></ul><hr><h1 id="Clustering"><a href="#Clustering" class="headerlink" title="Clustering"></a>Clustering</h1><p>Clustering means many database servers (usually named nodes) operating in a group, there are multiple ways to do this.</p><h3 id="Common-Scenario"><a href="#Common-Scenario" class="headerlink" title="Common Scenario"></a>Common Scenario</h3><p>The most common scenario is, several nodes access the same centralized shared disk, most of nodes used for reads and only one for write (CRUD) operations. </p><p><img src="http://programming4.us/image/022012/Achieving%20Performance,%20Scalability,%20and%20Availability%20Objectives_2.jpg" alt="Shared Disk Cluster"></p><p>This method provides a better performance of reading data, in additional, once a failure rises in a node, another node will take over the task (this feature is named failover). </p><p>But it also has obvious Achilles’ heel, limited scalability, first, there’s only one DB node takes charge of CRUD operations; second, the read limitations are particularly evident when an application requires complex joins or contains non-optimized SQL statements.</p><h3 id="Advanced-Clustering"><a href="#Advanced-Clustering" class="headerlink" title="Advanced Clustering"></a>Advanced Clustering</h3><p>Advanced clustering techniques rely on real-time memory replication between nodes, keeping the memory image of nodes in the cluster up to date via a real-time messaging system. </p><p><img src="https://www.percona.com/doc/percona-xtradb-cluster/5.5/_images/cluster-diagram1.png" alt="Advanced Database Clustering"></p><p>Every node is available to operate both reading and writing, but it’s limited by the amount of traffic between nodes (usually using the typical network or other high-speed communication mechanisms). When the nodes are added to the cluster, the communication and memory replication overhead increases geometrically. Since the severe scalability limitation, it’s often with a relatively fewer number of nodes.</p><p>This solution also suffers from the same shared disk limitations of a traditional cluster, given that a growing, single large database has increasingly intensive disk I/O.</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/01/28/structures-n-architectures-for-optimizing-database-en/b-b-king.jpg&quot; title=&quot;B.B. King&quot;&gt;

&lt;p&gt;Recently, I read the &lt;strong&gt;XtraDB&lt;/strong&gt; part of &lt;strong&gt;Percona Server&lt;/strong&gt; document roughly, in this process, I realized my huge lack of basic database knowledge, so it’s inevitable to spend a lot of time on clarifying many concepts which have been mentioned several times in the doc. &lt;/p&gt;
&lt;p&gt;In the meanwhile, I found out that there’s so much incorrect and ambiguous information on the internet, for the greater good, it could be great if I organize these all materials and post them on this blog. This article contain a few MySQL only usage, but it’s won’t cut down the readability for the reader who is not familiar with MySQL (perhaps…).&lt;/p&gt;
&lt;p&gt;Why use English? Due to most of the info I collect are written in English and I don’t have enough time to translate them. But don’t worry, I’ll post a Chinese version someday.&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="Database" scheme="http://blog.marksylee.com/categories/Technique/Database/"/>
    
    
      <category term="mysql" scheme="http://blog.marksylee.com/tags/mysql/"/>
    
      <category term="optimization" scheme="http://blog.marksylee.com/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>Java 面試 02 - JVM 的 Stack 和 Heap</title>
    <link href="http://blog.marksylee.com/2016/09/14/java-interview-02-jvm-stack-heap/"/>
    <id>http://blog.marksylee.com/2016/09/14/java-interview-02-jvm-stack-heap/</id>
    <published>2016-09-13T16:08:46.000Z</published>
    <updated>2020-05-31T05:49:48.146Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/09/14/java-interview-02-jvm-stack-heap/stack-heap-example1.PNG"><h3 id="請比較 -JVM- 記憶體的 -Stack- 和 -Heap"><a href="# 請比較 -JVM- 記憶體的 -Stack- 和 -Heap" class="headerlink" title="請比較 JVM 記憶體的 Stack 和 Heap"></a>請比較 JVM 記憶體的 Stack 和 Heap</h3><p>這題非常容易考到，而且翻譯十分混亂，盡量用原文去表達比較好，Stack 繁中為 <strong> 堆疊 </strong>、簡中為<strong> 棧</strong>，Heap 繁中為 <strong> 堆積 </strong>、簡中為<strong> 堆</strong>。</p><p>要特別注意的是，這邊的 Stack 和 Heap 並不是在指資料結構，而是指 <strong>JVM 記憶體管理 </strong> 的部分。</p><a id="more"></a><blockquote><p><strong>聲明：</strong></p><p>這些內容比較簡略、粗糙，忽略了很多細節，只揀選能回答到問題的部份去解說，並不是百分之百準確，除非每一題都有兩個小時以上的回答時間，否則這些內容應該足夠回答到面試官想聽的點。如果你真的很在乎每一個部份的細節內容，你不該讀我的筆記，而是去讀文件，自己寫自己的筆記。當然，我會隨著越講越深入而帶入更多細節的部份，但是我也需要考量文章篇幅以及流暢度。</p><p><strong>若有任何錯誤或遺漏之處，請在底下用力鞭我，不用客氣，隱瞞缺失比直指痛處更讓人害怕。</strong></p></blockquote><hr><p>首先，Java 檔經過編譯後所產生的 Class 檔 (bytecode)，只能運行在 JVM 上，而 JVM 在運算時，如同一般電腦一樣，需要記憶體儲存運算所需的資料及指令，而 JVM 記憶體中的 <strong>Stack</strong> 和 <strong>Heap</strong> 最常被拿來做比較 (記憶體中當然還有其他部份，包括 Method Area、PC Register、Native Method Stack，但不在本篇討論範圍)。</p><p><strong>JVM 記憶體的 Stack 和 Heap 絕對不要和其他同名的東西搞混，在這裡是做為 JVM 儲存資料或指令的區域，和其他同名的東西無關，請把它當作平行宇宙看待。</strong></p><hr><h1 id="Java- 中的資料型態"><a href="#Java- 中的資料型態" class="headerlink" title="Java 中的資料型態"></a>Java 中的資料型態 </h1><p> 分為兩種：</p><h4 id="1-Primitive-Type- 基本型態"><a href="#1-Primitive-Type- 基本型態" class="headerlink" title="1. Primitive Type 基本型態"></a>1. Primitive Type 基本型態</h4><ul><li>共有 8 種：<strong><em>int</em></strong>、<strong><em>short</em></strong>、<strong><em>long</em></strong>、<strong><em>byte</em></strong>、<strong><em>float</em></strong>、<strong><em>double</em></strong>、<strong><em>boolean</em></strong>、<strong><em>char</em></strong>。</li><li>這種類型是通過如 <code>int a = 3; long b = 123L;</code>的方式宣告。</li><li>長度及生命週期都為可知 (程式碼區塊執行完就扔掉)。</li><li>運算速度快，但長度與內容受限。</li></ul><h4 id="2-Class-Type-Reference-Type- 類別型態 - 參考型態"><a href="#2-Class-Type-Reference-Type- 類別型態 - 參考型態" class="headerlink" title="2. Class Type / Reference Type 類別型態 / 參考型態"></a>2. Class Type / Reference Type 類別型態 / 參考型態</h4><ul><li>其他大都屬於此類別，如 <strong><em>Integer</em></strong>、<strong><em>String</em></strong>、<strong><em>Long</em></strong> 以及自行定義的類別 (ex. <strong><em>User</em></strong>) 等。</li><li>這種類型通常都需要用 <strong><em>new</em></strong> 去創建，如 <code>User user = new User(&quot;Mark&quot;);</code>。</li><li>因為是在執行時才動態創建，所以長度及生命週期都不可預知。</li><li>靈活但運算較耗時。</li></ul><hr><h1 id="Stack- 堆疊、棧"><a href="#Stack- 堆疊、棧" class="headerlink" title="Stack 堆疊、棧"></a>Stack 堆疊、棧 </h1><p> 複習一下 <a href="http://blog.marksylee.com/2016/09/13/java-interview-01-program-process-thread/"><strong>前一章 </strong></a> 所提到的：<strong> 每一個 Thread 擁有自己的 Stack，Stack 是用來儲存函數路徑及區域變數，Thread 之間的 Stack 互相獨立。</strong></p><p>Stack 是一種 <strong> 後進先出 (FILO)</strong> 的容器，具有存取速度快和管理簡單的特點。由於 Java 中變數跟函式的生命週期都為 <strong> 後進先出 </strong>，也就是越晚產生的會越先被回收或銷毀，所以 Stack 非常適合做為這種可預測性的資料，如 <strong> 區域變數、函式參數與函式返回位址 </strong> 等等，的儲存容器。</p><p>因為 Stack 中的資料生命週期都是 <strong> 規律 </strong> 的，所以由系統自行去產生和回收空間即可，程式設計師不需要介入。</p><hr><h1 id="Heap- 堆積、堆"><a href="#Heap- 堆積、堆" class="headerlink" title="Heap 堆積、堆"></a>Heap 堆積、堆 </h1><p> 還記得 <a href="http://blog.marksylee.com/2016/09/13/java-interview-01-program-process-thread/"><strong>前一章 </strong></a> 提到 <strong>Process 的 Memory Space 是專門儲存共享資料 / 資源</strong> 的嗎？Heap 就屬於這種共享資料。</p><p>Class Type 在創建 <strong> 實例 (Instance)</strong> 時 (ex. <code>new User(&quot;Mark&quot;);</code>)，就是把資料放置於 Heap 中，系統會在 Heap 內找一塊區域放置此 User 實例的 <strong> 屬性資料</strong>，也因為 Heap 存放的是共享資料，所以不論該實例是由哪一個 Thread 所創建的，同 Process 底下的其他 Thread 也可以進行存取。</p><p>因為實例的生命週期是不可預知的，系統較難以自行去回收空間，所幸，Java 的特色之一就是 <strong>Garbage Collection 機制 (簡稱 GC)</strong>，會自動去清理 Heap 內已經 <strong> 沒有被參考 (Reference)</strong> 的資料，當然，程式設計師可以撰寫程式去控制 GC 的行動，不過大多數情況下都 <strong> 不建議 </strong> 如此，過多的介入反而可能造成資源的浪費，未來 <del> 可能 </del> 會再寫一篇簡述 GC 是如何判斷哪些資料應該被清理。</p><hr><h1 id="範例"><a href="# 範例" class="headerlink" title="範例"></a>範例 </h1><p> 可能有人看到這邊仍是霧煞煞，以下我用簡單的程式來講解資料儲存實際上是如何運作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">long</span> b = <span class="number">456L</span>;</span><br><span class="line">User c = <span class="keyword">new</span> User(<span class="string">"Mark"</span>, Gender.MALE);</span><br></pre></td></tr></table></figure><p>以上程式碼的資料儲存順序大致上可以視為以下流程圖 <em>(在此先不考慮 Constant Pool)</em>。</p><img src="/2016/09/14/java-interview-02-jvm-stack-heap/stack-heap-example2.PNG" title="example"><p>前兩行指令都是 Primitive Type，會在 Stack 內建立變數 <strong><em>a</em></strong> 和 <strong><em>b</em></strong>，並將實際值 <strong><em>123</em></strong> 和 <strong><em>456L</em></strong> 存放於變數內。</p><p>第三行指令要切分成兩個部份，等號右邊及左邊，首先是右邊的部份，先以 <strong><em>name</em></strong> 和 <strong><em>gender</em></strong> 參數創建一個 User 實例，此時會在 Heap 中的一個位址 (ex. <strong><em>0x1234</em></strong>) 存放實例的屬性資料 (ex. <strong><em>name</em></strong>、<strong><em>gender</em></strong>、<strong><em>address</em></strong>…)，並將實例所在的記憶體位址 (<strong><em>0x1234</em></strong>) 指定給變數 <strong><em>c</em></strong> 參考。</p><blockquote><p>這篇是以變數為例子去比較兩者儲存方式的不同，至於「Stack 如何儲存函式」、「常數池 (Constant Pool) 是什麼」、「實例的 method 存放在哪」等等問題，留待後面文章再做解答。</p></blockquote><p>從以上的例子可以發現，Stack 內的變數值分為兩種類型，一種為 <strong>Value Type 實質類別 </strong>，儲存的是<strong> 實際的值 </strong> (ex. <strong><em>123</em></strong>、<strong><em>456L</em></strong>)；另一種為 <strong>Reference Type 參考類別</strong>，儲存的是<strong> 資料在 Heap 中的記憶體位址</strong> (ex. <strong><em>0x1234</em></strong>)。</p><hr><h1 id="總結"><a href="# 總結" class="headerlink" title="總結"></a>總結</h1><ol><li>Stack 和 Heap 是 JVM 記憶體儲存資料或指令的區域。</li><li>Java 的資料類型分為兩種：Primitive Type 和 Class Type。</li><li>Stack 存取速度快，但資料長度及生命週期必須是預知的，用來儲存區域變數、函式參數與函式返回位址等資料。</li><li>Heap 是 Class Type 創建實例時存放資料的地方，在 Heap 創建完成後會回傳所在的記憶體位址。</li><li>變數可能是 Primitive Type 或 Class / Reference Type 。若是 Primitive Type，則在 Stack 內的變數值為實際值；若是 Class / Reference Type，實例資料會儲存在 Heap 中，Stack 內的變數值為實例在 Heap 中的記憶體位址。</li><li><code>User user = new User(&quot;Mark&quot;);</code> 的行為簡單來說是：<br> i.    創建並儲存 <strong>User 實例 (<em>name = Mark</em>)</strong> 於 Heap 中。<br> ii.    儲存完成後，回傳資料所在的記憶體位址。<br> iii. 在 Stack 中新增變量 <strong><em>user</em></strong>。<br> iv.    將 ii. 所傳回的記憶體位址指定給 <strong><em>user</em></strong> 參考。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/09/14/java-interview-02-jvm-stack-heap/stack-heap-example1.PNG&quot;&gt;

&lt;h3 id=&quot;請比較-JVM-記憶體的-Stack-和-Heap&quot;&gt;&lt;a href=&quot;#請比較-JVM-記憶體的-Stack-和-Heap&quot; class=&quot;headerlink&quot; title=&quot;請比較 JVM 記憶體的 Stack 和 Heap&quot;&gt;&lt;/a&gt;請比較 JVM 記憶體的 Stack 和 Heap&lt;/h3&gt;&lt;p&gt;這題非常容易考到，而且翻譯十分混亂，盡量用原文去表達比較好，Stack 繁中為&lt;strong&gt;堆疊&lt;/strong&gt;、簡中為&lt;strong&gt;棧&lt;/strong&gt;，Heap 繁中為&lt;strong&gt;堆積&lt;/strong&gt;、簡中為&lt;strong&gt;堆&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;要特別注意的是，這邊的 Stack 和 Heap 並不是在指資料結構，而是指 &lt;strong&gt;JVM 記憶體管理&lt;/strong&gt;的部分。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="Java" scheme="http://blog.marksylee.com/categories/Technique/Java/"/>
    
    
      <category term="interview" scheme="http://blog.marksylee.com/tags/interview/"/>
    
      <category term="java_interview" scheme="http://blog.marksylee.com/tags/java-interview/"/>
    
  </entry>
  
  <entry>
    <title>Java 面試 01 - Program、Process 和 Thread</title>
    <link href="http://blog.marksylee.com/2016/09/13/java-interview-01-program-process-thread/"/>
    <id>http://blog.marksylee.com/2016/09/13/java-interview-01-program-process-thread/</id>
    <published>2016-09-13T12:53:37.000Z</published>
    <updated>2020-05-31T05:49:48.145Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/09/13/java-interview-01-program-process-thread/process-and-thread.PNG" title="multithreaded process"><h3 id="請簡介 -Program、Process- 和 -Thread- 及其差別"><a href="# 請簡介 -Program、Process- 和 -Thread- 及其差別" class="headerlink" title="請簡介 Program、Process 和 Thread 及其差別"></a>請簡介 Program、Process 和 Thread 及其差別 </h3><p> 這一題倒是比較少考到，不過為了後面講解多執行緒 (Multi-Thread) 以及 JVM Stack/Heap 方便，所以還是必須要提一下。</p><a id="more"></a><blockquote><p><strong>聲明：</strong></p><p>這些內容比較簡略、粗糙，忽略了很多細節，只揀選能回答到問題的部份去解說，並不是百分之百準確，除非每一題都有兩個小時以上的回答時間，否則這些內容應該足夠回答到面試官想聽的點。如果你真的很在乎每一個部份的細節內容，你不該讀我的筆記，而是去讀文件，自己寫自己的筆記。當然，我會隨著越講越深入而帶入更多細節的部份，但是我也需要考量文章篇幅以及流暢度。</p><p><strong>若有任何錯誤或遺漏之處，請在底下用力鞭我，不用客氣，隱瞞缺失比直指痛處更讓人害怕。</strong></p></blockquote><hr><h1 id="Program- 程式"><a href="#Program- 程式" class="headerlink" title="Program 程式"></a>Program 程式 </h1><p><strong> 還沒有被執行的程式，或是說可以驅動 / 命令電腦的指令集合</strong>，它可能是指令、可讀的程式碼、編譯過的位元碼 (bytecode) 或是機器碼。</p><hr><h1 id="Process- 程序"><a href="#Process- 程序" class="headerlink" title="Process 程序"></a>Process 程序 </h1><p><strong> 當 Program 被執行時，所產生的執行個體</strong>，Program 被執行就會產生 Process，所以如果同時執行同一個 Program 十次，就會產生至少十個 Process。要切記一點，一顆 CPU 同時只能做一個運算，多工作業系統 (Multitasking Operating System) 可以同時運行多個 Process 是因為它將 Process 進行排程 (Scheduling)，令 CPU 在各 Process 切換，因為速度很快，所以才會有同時處裡好多個 Process 的錯覺。</p><p>Process 粗略包含以下兩個部分 <em>(實際上更複雜，未來再討論)</em>：</p><h4 id="1-Memory-Space- 記憶體空間"><a href="#1-Memory-Space- 記憶體空間" class="headerlink" title="1. Memory Space 記憶體空間"></a>1. Memory Space 記憶體空間 </h4><p> 所有此 Process 的共享資料、資源放置於此，同一個 Process 底下的所有 Thread 皆可存取，但是不同 Process 的 Memory Space 不同，Process 彼此之間無法存取對方的 Memory Space。</p><h4 id="2-Thread- 執行緒"><a href="#2-Thread- 執行緒" class="headerlink" title="2. Thread 執行緒"></a>2. Thread 執行緒</h4><hr><h1 id="Thread- 執行緒"><a href="#Thread- 執行緒" class="headerlink" title="Thread 執行緒"></a>Thread 執行緒</h1><p><strong>CPU 實際運算的部分</strong>，Thread 包含兩個部分 <em>(實際上更複雜，未來再討論)</em>：</p><h4 id="1-Stack- 堆疊"><a href="#1-Stack- 堆疊" class="headerlink" title="1. Stack 堆疊"></a>1. Stack 堆疊 </h4><p> 儲存從起點開始 (例如<code>main</code>)，到目前為止所有函數呼叫路徑，以及這些呼叫路徑上所用到的區域變數。</p><h4 id="2-CPU- 狀態"><a href="#2-CPU- 狀態" class="headerlink" title="2. CPU 狀態"></a>2. CPU 狀態 </h4><p> 存放 CPU 暫存器 (如 Program Counter, Stack Pointer, Program Status Word…) 等狀態，以便在 CPU 再次回來執行時能知道上次執行狀況。</p><p>–</p><p>一個 Process 包含一個以上的 Thread，以 Java SE 為例，應用程式從起始的入口 <code>main</code> 開始執行，這就是主執行緒 (Main Thread)，如果程式內沒有創建其他 Thread，則稱為單一執行緒；若是程式內有使用類似以下方式去主動創建 Thread，則稱為多執行緒 (Multithreading)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadExample1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Custom Thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> ThreadExample1();  <span class="comment">// 創建 Thread</span></span><br><span class="line">        t.start();  <span class="comment">// 執行 Thread</span></span><br><span class="line">        System.out.println(<span class="string">"Main Thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadExample2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Custom Thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadExample2());  <span class="comment">// 創建 Thread</span></span><br><span class="line">        t.start();  <span class="comment">// 執行 Thread</span></span><br><span class="line">        System.out.println(<span class="string">"Main Thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面說到 CPU 會在 Process 之間做切換，其實 CPU 被分配給 Process 時主要是執行 Thread 運算，當 CPU 要處理的 Process 底下有多個 Thread，CPU 會依照 Thread 優先順序以及 CPU 使用時間去分配，在 Thread 之間做切換，讓每個 Thread 都有被執行到的機會，達到多個 Thread 同時運算的效果。</p><h1 id="總結"><a href="# 總結" class="headerlink" title="總結"></a>總結</h1><ol><li>Program 是還沒被執行的指令或程式集合</li><li>Process 是 Program 執行時產生的執行個體</li><li>Process 下有 Memory Space 和一個以上的 Thread</li><li>Memory Space 是同 Process 下所有 Thread 共用，主要用來存放共享的資料及資源</li><li>Thread 有自己的 Stack 來儲存函數路徑及區域變數，所以不同 Thread 之間的區域變數是互相獨立的</li><li>CPU 會在 Process 之間快速切換來達到多工的目的</li><li>CPU 也會根據 Thread 優先權以及 CPU 使用時間，在 Thread 之間切換，讓每個 Thread 都有被執行的機會</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/09/13/java-interview-01-program-process-thread/process-and-thread.PNG&quot; title=&quot;multithreaded process&quot;&gt;

&lt;h3 id=&quot;請簡介-Program、Process-和-Thread-及其差別&quot;&gt;&lt;a href=&quot;#請簡介-Program、Process-和-Thread-及其差別&quot; class=&quot;headerlink&quot; title=&quot;請簡介 Program、Process 和 Thread 及其差別&quot;&gt;&lt;/a&gt;請簡介 Program、Process 和 Thread 及其差別&lt;/h3&gt;&lt;p&gt;這一題倒是比較少考到，不過為了後面講解多執行緒 (Multi-Thread) 以及 JVM Stack/Heap 方便，所以還是必須要提一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="Java" scheme="http://blog.marksylee.com/categories/Technique/Java/"/>
    
    
      <category term="interview" scheme="http://blog.marksylee.com/tags/interview/"/>
    
      <category term="java_interview" scheme="http://blog.marksylee.com/tags/java-interview/"/>
    
  </entry>
  
  <entry>
    <title>網路妨礙名譽報案流程</title>
    <link href="http://blog.marksylee.com/2016/08/01/how-to-sue-for-offenses-against-reputation/"/>
    <id>http://blog.marksylee.com/2016/08/01/how-to-sue-for-offenses-against-reputation/</id>
    <published>2016-08-01T10:16:42.000Z</published>
    <updated>2020-05-31T05:49:48.142Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/08/01/how-to-sue-for-offenses-against-reputation/gary-moore.jpg" title="Gary Moore"><p>在網路上與人互動難免會起口角，雖說大多能夠理性溝通，但是仍會有少部份的人很壓抑、很衝動，說出一些讓人不太舒服的話，甚至是人身攻擊，這時候，我們應該懂得保護自己、維護自己的權益。</p><a id="more"></a><p>首先，一定要 <strong> 保持冷靜</strong>，千萬別被激怒，更不可以做出太過的反擊讓對方有機可乘，當對方口出惡言讓你感到受辱時，善意地提醒對方道歉，否則將採取必要措施。切記，不斷提醒自己是文明人，對方病了，我們要用理性的方式治他。</p><p>很遺憾的是，善意的提醒通常不會奏效，對方很可能變本加厲地攻擊，甚至不斷譏諷、嘲弄、勸退，這時候我們要保持本心，不要受他的影響，並開始採取以下行動。</p><p><code>有時候對方會聲稱「我又沒有指名道姓，是你自己要對號入座，告不了我的啦！」基本上，告不告得成不是他說了算，只要有符合：在公開場合、亂罵髒話或是讓人覺得受侮辱的話，就算成立。所以不論是否匿名、是否指名道姓，只要有滿足前者條件，就可以提告。不要害怕失敗，就算失敗也不會有所損失，不會因為你告輸了就掛上前科。</code></p><h3 id="1- 留下所有證據，並存到隨身碟"><a href="#1- 留下所有證據，並存到隨身碟" class="headerlink" title="1. 留下所有證據，並存到隨身碟"></a>1. 留下所有證據，並存到隨身碟 </h3><p> 這非常重要！不管是遊戲、網頁文字或是語音對話，用拍照或錄音的方式完整紀錄下來，甚至將所有可以收集到的對方資料也找出來，並照順序歸檔，如果有網址等能夠現場重現的的資料最好也記下來，以下是我當時所截取的圖片及網址。</p><img src="/2016/08/01/how-to-sue-for-offenses-against-reputation/evidence.png"><h3 id="2- 回想從頭到尾整個過程"><a href="#2- 回想從頭到尾整個過程" class="headerlink" title="2. 回想從頭到尾整個過程"></a>2. 回想從頭到尾整個過程 </h3><p> 事情是怎麼發生的，你做了什麼時候，他做了什麼事情，最好連時間都記下來，把他當作準備報告一樣想透徹，因為你向警察說明得越詳細，筆錄的製作會更加順利。</p><h3 id="3- 帶上身份證和證據，前往你上網地所屬的警察局"><a href="#3- 帶上身份證和證據，前往你上網地所屬的警察局" class="headerlink" title="3. 帶上身份證和證據，前往你上網地所屬的警察局"></a>3. 帶上身份證和證據，前往你上網地所屬的警察局 </h3><p> 記住一定要是上網地的警察局，例如你在家上網跟人起糾紛，就前往離你家最近的警察局就對了，因為若是你跑去其他分局，他們還是會把你轉去所屬地的分局。</p><h3 id="4- 報案"><a href="#4- 報案" class="headerlink" title="4. 報案"></a>4. 報案 </h3><p> 鼓起勇氣踏入派出所，你不是犯人並不需要害怕，和受理員警表明「我在網路上被人辱罵，我要告他妨礙名譽(妨礙名譽是誹謗罪、公然侮辱和加重誹謗的總稱，所以這樣講是沒有問題的)」，將手中所有證據交給警察，並向員警描述案發經過。</p><h3 id="5- 怎麼辦？查不到被告人資料"><a href="#5- 怎麼辦？查不到被告人資料" class="headerlink" title="5. 怎麼辦？查不到被告人資料"></a>5. 怎麼辦？查不到被告人資料 </h3><p> 警察會根據你提供的證據尋找被告人，可能是他網路上留的個人資料，可能是連線的 IP 等等，不過因為現在有通保法，使得警方要查到對方資料好像「稍微」困難一點，但是大部份都只是時間問題，加上有中華民國的先進科技(當時警員說的)，要找出一般人是妥妥的，就算運氣不好，真的一時查不到對方資料，也是能告！告不告得成是由檢察官、法官決定，警方只是受理單位，所以如果警察跟你說無法告或是想勸退，那只是他不想 / 懶得受理。另外，員警可能會問你，除了刑事告訴之外，是否要求民事賠償，請放心地說「是！」，最後確認資料、筆錄並簽名，領取三聯單即完成報案手續。</p><h3 id="6- 再來呢？我要不要請律師？我會不會有案底？我…"><a href="#6- 再來呢？我要不要請律師？我會不會有案底？我…" class="headerlink" title="6. 再來呢？我要不要請律師？我會不會有案底？我…"></a>6. 再來呢？我要不要請律師？我會不會有案底？我…</h3><p>別緊張，這種告訴方式只是其中一種，還有其他很多方法，例如請律師寫狀紙啊等等，這種告訴方式的好處很明顯，你不用花錢請律師，你不用自己查案查資料，檢察官就是你的律師，所以你此時要做的就是等，等跑流程、等檢察官辦理，檢察官會主動跟你告知進度和希望你配合的事項，所以不用擔心太多，你只需要有耐心，因為這不是一兩個禮拜就可以搞定的，少說也要三五個月，但是不用擔心被吃案，別忘了你手上熱騰騰的三聯單。至於會不會贏，沒有人可以保證，就算輸了你也沒有損失(如果硬要說，就是時間吧…)，不過也很有可能在檢察官那一關就會要求雙方和解，這時候你可以開出一個你滿意的和解金，如果對方果斷拒絕不再協商，那就會送進去跑告訴流程了。</p><h3 id="7- 如果真的要跑法院呢？"><a href="#7- 如果真的要跑法院呢？" class="headerlink" title="7. 如果真的要跑法院呢？"></a>7. 如果真的要跑法院呢？</h3><p>如果對方拒絕和解，真的要跑法院，其實也不用太擔心，這種小案子頂多跑個兩三次而已，法院也不會花太多時間處理這種案子，通常一般被告者應該不會讓自己走到這一步，因為這一旦輸了，就會留下案底，妨礙名譽是刑事罪，也就是一旦成立，這個前科會跟著被告人一輩子，雖然說妨礙名譽罰得不重，但是沒有人會想要一輩子背著案底。此時你看到罰得不重是不是有點想打退堂鼓？先別急，還記得報案時員警有問過你是否要求民事賠償？(千萬要說是啊！)民事賠償的部份才是真的賠償給提告者的，至於會賠償多少錢就要看你的呈述和法官的決定，例如描述他的侮辱對你的身心靈影響等等。</p><p>以上就是大致的流程，我目前只走到第六步，正在等待檢察官聯絡，所以後面也是參考其他人的文章，如果有更新進度會再更新上來。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/08/01/how-to-sue-for-offenses-against-reputation/gary-moore.jpg&quot; title=&quot;Gary Moore&quot;&gt;

&lt;p&gt;在網路上與人互動難免會起口角，雖說大多能夠理性溝通，但是仍會有少部份的人很壓抑、很衝動，說出一些讓人不太舒服的話，甚至是人身攻擊，這時候，我們應該懂得保護自己、維護自己的權益。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://blog.marksylee.com/categories/Life/"/>
    
      <category term="Law" scheme="http://blog.marksylee.com/categories/Life/Law/"/>
    
    
      <category term="offenses against reputation" scheme="http://blog.marksylee.com/tags/offenses-against-reputation/"/>
    
  </entry>
  
  <entry>
    <title>Gradle/Ant 合併檔案編碼問題</title>
    <link href="http://blog.marksylee.com/2016/06/25/gradle-ant-concat-encoding/"/>
    <id>http://blog.marksylee.com/2016/06/25/gradle-ant-concat-encoding/</id>
    <published>2016-06-25T03:41:12.000Z</published>
    <updated>2020-05-31T05:49:48.141Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/06/25/gradle-ant-concat-encoding/joe-satriani.jpg" title="Joe Satriani"><p>使用 Ant 或 Gradle 合併多個檔案時，因為檔案內含中文字導致編碼問題。</p><a id="more"></a><h1 id="問題"><a href="# 問題" class="headerlink" title="問題"></a>問題 </h1><p> 我有一支合併檔案的 task 如下：</p><figure class="highlight gradle"><figcaption><span>將 data 下的 SQL 檔合併成 output 內的 result.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">task</span> concatsql(type: SourceTask) &#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="string">'output/result.sql'</span></span><br><span class="line">    <span class="keyword">source</span> <span class="string">'data'</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">'*.sql'</span></span><br><span class="line">    outputs.<span class="keyword">file</span> <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"output"</span>, <span class="string">"result.sql"</span>)</span><br><span class="line">    <span class="keyword">doLast</span> &#123;</span><br><span class="line">        <span class="keyword">ant</span>.concat(destfile: outputs.files.singleFile) &#123;</span><br><span class="line">            <span class="keyword">source</span>.addToAntBuilder(<span class="keyword">ant</span>, <span class="string">'fileset'</span>, FileCollection.AntType.FileSet)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因為 SQL 檔內容包含中文字，導致輸出的內容會有亂碼，而這支 Gradle，其實底層是使用 Ant 的 cancat 功能，所以同理，使用 Ant 去跑也會出現一樣的問題。</p><h1 id="基礎知識"><a href="# 基礎知識" class="headerlink" title="基礎知識"></a>基礎知識 </h1><p> 好像也沒什麼基礎知識，就是 encoding 的問題。</p><p>Ant 可以加入 <code>encoding</code> 跟<code>outputencoding</code>屬性，請參考<a href="http://stackoverflow.com/questions/12374324/how-to-encode-java-files-in-utf-8-using-apache-ant" target="_blank" rel="noopener">How to encode Java files in UTF-8 using Apache Ant?</a>。</p><h1 id="解決方法"><a href="# 解決方法" class="headerlink" title="解決方法"></a>解決方法 </h1><p> 首先將原始檔案儲存為 <code>UTF-8</code> 編碼，並在呼叫 <code>ant.concat</code> 時，加入 <code>encoding</code> 和<code>outputencoding</code>設定。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">task</span> concatsql(type: SourceTask) &#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="string">'output/result.sql'</span></span><br><span class="line">    <span class="keyword">source</span> <span class="string">'data'</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">'*.sql'</span></span><br><span class="line">    outputs.<span class="keyword">file</span> <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"output"</span>, <span class="string">"result.sql"</span>)</span><br><span class="line">    <span class="keyword">doLast</span> &#123;</span><br><span class="line">        <span class="keyword">ant</span>.concat(destfile: outputs.files.singleFile, encoding:<span class="string">"UTF-8"</span>,</span><br><span class="line">                outputencoding: <span class="string">"UTF-8"</span>) &#123;</span><br><span class="line">            <span class="keyword">source</span>.addToAntBuilder(<span class="keyword">ant</span>, <span class="string">'fileset'</span>, FileCollection.AntType.FileSet)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/06/25/gradle-ant-concat-encoding/joe-satriani.jpg&quot; title=&quot;Joe Satriani&quot;&gt;

&lt;p&gt;使用Ant或Gradle合併多個檔案時，因為檔案內含中文字導致編碼問題。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="Java" scheme="http://blog.marksylee.com/categories/Technique/Java/"/>
    
    
      <category term="gradle" scheme="http://blog.marksylee.com/tags/gradle/"/>
    
      <category term="ant" scheme="http://blog.marksylee.com/tags/ant/"/>
    
  </entry>
  
  <entry>
    <title>2016 亞太開發人員技術年會‬</title>
    <link href="http://blog.marksylee.com/2016/06/24/dev-days-asia-2016/"/>
    <id>http://blog.marksylee.com/2016/06/24/dev-days-asia-2016/</id>
    <published>2016-06-24T09:51:41.000Z</published>
    <updated>2020-05-31T05:49:48.138Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/06/24/dev-days-asia-2016/steve-vai.jpg" title="Steve Vai"><p> 大部分都在展示產品功能 (行銷研討會的味道)，會議主要分為兩個部分 Office 和 Microsoft Azure。</p><p><a href="https://www.microsoft.com/taiwan/events/devdays/" target="_blank" rel="noopener"> 活動網址 </a></p><a id="more"></a><h1 id="Office"><a href="#Office" class="headerlink" title="Office"></a>Office</h1><h3 id="Office-Add-ins"><a href="#Office-Add-ins" class="headerlink" title="Office Add-ins"></a>Office Add-ins</h3><p><a href="https://dev.office.com/docs/add-ins/overview/office-add-ins" target="_blank" rel="noopener">Office Add-ins Dev Doc</a></p><p> 支援使用 JavaScript 開發 Office Add-ins，降低開發門檻和提升開發效率，提供 API(但沒有大概介紹有哪些，主要還是要去看 doc) 滿足使用者需求等等，然後 Demo 幾個範例，例如 Word Add-in 可以讓使用者直接用 Word 抓取外部資料和樣板，用拖拉的方式去完成一份文件；或是用 Excel Add-in 把 Excel 做得像是記帳軟體等等。</p><h3 id="Office-365-RESTful-API"><a href="#Office-365-RESTful-API" class="headerlink" title="Office 365 RESTful API"></a>Office 365 RESTful API</h3><p>Office 365 提供 RESTful API 讓開發者可以使用各種語言 / 應用去結合 Office 365，這其中順便幫 Office 365 新的服務 Connector 打廣告，Connector 想要做的是一個訊息集散的應用，可以整合 GitHub、Trello、Twitter 等等，作為企業內部溝通的平台，有一點 Slack 的感覺。</p><p> 因為 Office 365 提倡的是雲端協同辦公室的概念，一切都交給微軟雲端解決，所以整合就是個很大的賣點，微軟將 Office 365 的所有應用服務 API 整合在單一窗口，稱為 Microsoft Graph，透過 Microsoft Graph 提供的 API 可以對 Office 365 所有應用進行操作，至於操作可以到什麼程度並沒有說明，Demo 主要都是針對獲取資料的部分，例如取得文件作者、時間、權限資料，拿資料還做視覺化處理或是產報表等等。</p><h1 id="Microsoft-Azure"><a href="#Microsoft-Azure" class="headerlink" title="Microsoft Azure"></a>Microsoft Azure</h1><h3 id="Cortana-and-other-tools"><a href="#Cortana-and-other-tools" class="headerlink" title="Cortana and other tools"></a>Cortana and other tools</h3><p> 一開始稍微帶過 Cortana 以及背後的 Machine Learning，展示了一些和 Machine Learning 相關的工具以及 API，現場展示的有臉部辨識的應用，例如從相片或即時影像中找出人臉，並辨識年齡 / 性別 / 情緒等等，準確度滿高的，這些都有 API 可以使用，詳情可參考官網。</p><h3 id="Microsoft-Azure-VM-Database-DataWarehouse-DataLake-and-Power-BI"><a href="#Microsoft-Azure-VM-Database-DataWarehouse-DataLake-and-Power-BI" class="headerlink" title="Microsoft Azure VM/Database/DataWarehouse/DataLake and Power BI"></a>Microsoft Azure VM/Database/DataWarehouse/DataLake and Power BI</h3><p> 感覺得出微軟非常想推 Azure 和 Power BI，光是 Demo 如何在 Azure 上建 Data Lake 和用 Power BI 取出資料分析並建立報表就花了不少時間 (跟其他比起來)，中間一度花很多時間在看講者操作 Power BI 拖拉產生各種報表展示有多方便、強大、產出來的圖片有多漂亮。</p><h3 id="Microsoft-Azure-Machine-Learning"><a href="#Microsoft-Azure-Machine-Learning" class="headerlink" title="Microsoft Azure Machine Learning"></a>Microsoft Azure Machine Learning</h3><p> 展示如何使用拖拉功能就能設計好演算法，甚至有不少經典的模型已經在裡面讓你直接套用，你要做的就是依你的需求做調整，並餵 training data 和 testing data 進去，model 完成之後，未來想使用就直接 call 這個 model 的 API 就行了。當然，提供許多 module，擁有彈性和易於開發，更可以跟 Office Add-ins 做結合。</p><p> 大致上是這樣，當然實際上會有更細的解說、更多的展示和功能操作。</p><p><del> 聽其他與會者有在 murmur 這些東西去年就講過了。</del></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/06/24/dev-days-asia-2016/steve-vai.jpg&quot; title=&quot;Steve Vai&quot;&gt;

&lt;p&gt;大部分都在展示產品功能(行銷研討會的味道)，會議主要分為兩個部分Office和Microsoft Azure。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.microsoft.com/taiwan/events/devdays/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;活動網址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="Misc" scheme="http://blog.marksylee.com/categories/Technique/Misc/"/>
    
    
      <category term="conf." scheme="http://blog.marksylee.com/tags/conf/"/>
    
  </entry>
  
  <entry>
    <title>IE 列印異常</title>
    <link href="http://blog.marksylee.com/2016/06/24/ie-print-error/"/>
    <id>http://blog.marksylee.com/2016/06/24/ie-print-error/</id>
    <published>2016-06-24T09:40:39.000Z</published>
    <updated>2020-05-31T05:49:48.144Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/06/24/ie-print-error/les-paul.jpg" title="Les Paul"><p>最近接到個比較陌生的問題，客戶想要直接透過瀏覽器的列印功能，去印下系統頁面，當內容頁數超過一頁以上時，在 IE 的預覽列印只能顯示第一頁(當然也只會印第一頁)，而其他瀏覽器則沒有這個問題。</p><a id="more"></a><h1 id="問題"><a href="# 問題" class="headerlink" title="問題"></a>問題 </h1><p> 使用 IE 打開網頁時，若是網頁內容超過一頁以上，使用 IE 的列印功能，只能夠印出或預覽列印第一頁。</p><h1 id="參考資料"><a href="# 參考資料" class="headerlink" title="參考資料"></a>參考資料 </h1><p> 如果內容長度超出一個頁面的標籤，其 style 有 position: absolute 時，就會出現這個狀況，所以可以算是 IE 對於 CSS 上面的 bug。</p><p>來源：<a href="http://serverfault.com/questions/6998/internet-explorer-sometimes-only-prints-the-first-page" target="_blank" rel="noopener">Internet Explorer sometimes only prints the first page</a></p><h1 id="解決方法"><a href="# 解決方法" class="headerlink" title="解決方法"></a>解決方法 </h1><p> 我的做法是用其他 position 取代 absolute，但是記得要 check 一下版型有沒有跑掉。</p><figure class="highlight html"><figcaption><span>原為</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#content</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line"><span class="css">    <span class="comment">/* 其他 css */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    一狗票好幾頁的內容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>改為</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#content</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line"><span class="css">    <span class="comment">/* 其他 css */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    一狗票好幾頁的內容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/06/24/ie-print-error/les-paul.jpg&quot; title=&quot;Les Paul&quot;&gt;

&lt;p&gt;最近接到個比較陌生的問題，客戶想要直接透過瀏覽器的列印功能，去印下系統頁面，當內容頁數超過一頁以上時，在IE的預覽列印只能顯示第一頁(當然也只會印第一頁)，而其他瀏覽器則沒有這個問題。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="HTML" scheme="http://blog.marksylee.com/categories/Technique/HTML/"/>
    
    
      <category term="ie" scheme="http://blog.marksylee.com/tags/ie/"/>
    
  </entry>
  
  <entry>
    <title>Pidgin Plugin For Line</title>
    <link href="http://blog.marksylee.com/2016/06/24/pidgin-plugin-for-line/"/>
    <id>http://blog.marksylee.com/2016/06/24/pidgin-plugin-for-line/</id>
    <published>2016-06-24T09:23:03.000Z</published>
    <updated>2020-05-31T05:49:48.159Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/06/24/pidgin-plugin-for-line/tony-lommi.jpg" title="Tony Lommi"><p>Pidgin 是一套通訊軟體，整合了 Facebook、Google Talk、IRC、Line 等多達 20 種的即時通訊。可惜的是，Pidgin 預設並未提供 Line 登入，好在神人很多，已經有人開發 Line 的 plugin，但是只有 Source Code，所以想裝就得自己編譯！</p><a id="more"></a><figure class="highlight bash"><figcaption><span> 使用 root 身分 </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span> 安裝必要軟體 </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get update </span><br><span class="line">apt-get install -y pidgin git build-essential</span><br><span class="line">apt-get install -y libpurple-dev libboost-dev libboost-test-dev libboost-program-options-dev libevent-dev automake libtool flex bison pkg-config g++ libssl-dev libgcrypt11-dev</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span> 安裝 Apache thirft</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">mkdir purpleline</span><br><span class="line"><span class="built_in">cd</span> purpleline</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/apache/thrift thrift</span><br><span class="line"><span class="built_in">cd</span> thrift</span><br><span class="line">git checkout 0.9.2</span><br><span class="line">./bootstrap.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lib</span><br><span class="line">mkdir thrift</span><br><span class="line">mv libthrift* thrift</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/thrift/libthrift-0.9.2.so /usr/lib/libthrift.so</span><br><span class="line"><span class="built_in">cd</span> /tmp/purpleline</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span> 安裝 purple_line </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> http://altrepo.eu/git/purple-line.git/ purple-line </span><br><span class="line">git <span class="built_in">clone</span> http://altrepo.eu/git/line-protocol.git/ line-protocol </span><br><span class="line">cp line-protocol/line_main.thrift purple-line/ </span><br><span class="line">cp line-protocol/line.thrift purple-line/ </span><br><span class="line"><span class="built_in">cd</span> purple-line </span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure><p> 重新登入後即可使用！</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/06/24/pidgin-plugin-for-line/tony-lommi.jpg&quot; title=&quot;Tony Lommi&quot;&gt;

&lt;p&gt;Pidgin是一套通訊軟體，整合了Facebook、Google Talk、IRC、Line等多達20種的即時通訊。可惜的是，Pidgin預設並未提供Line登入，好在神人很多，已經有人開發Line的plugin，但是只有Source Code，所以想裝就得自己編譯！&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="Linux" scheme="http://blog.marksylee.com/categories/Technique/Linux/"/>
    
    
      <category term="ubuntu" scheme="http://blog.marksylee.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>筆記型電腦 Windows Ubuntu 雙系統</title>
    <link href="http://blog.marksylee.com/2016/06/24/windows-ubuntu-dual-boot/"/>
    <id>http://blog.marksylee.com/2016/06/24/windows-ubuntu-dual-boot/</id>
    <published>2016-06-24T09:13:59.000Z</published>
    <updated>2020-05-31T05:49:48.181Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/06/24/windows-ubuntu-dual-boot/jimmy-page.jpg" title="Jimmy Page"><p>明很簡單的東西，我硬要給人繞一大圈，真夠蠢的…</p><a id="more"></a><h1 id="這是昨晚的流程"><a href="# 這是昨晚的流程" class="headerlink" title="這是昨晚的流程"></a>這是昨晚的流程</h1><p>Windows Reset → D 槽切一半 → 裝 Ubuntu → 裝 Grub 2 開機選單 → 但是選單的第一項是 Ubuntu，想改為 Windows → 修改 BIOS 的 boot option → 發現 boot option #1 如果是 Windows Boot Maganer 就不會跳出選單會直接進 Windows → 把 boot option #1 設為 Linux → 進 Ubuntu 用 boot-repair 重建 Grub 選單 → Windows 的 MBR (在 C 槽) 和 Ubuntu (在 D 槽) 合併，並存到 D 槽 → boot option #1 改回 Windows Boot Manager 依舊無法解決系統直接進入 Windows 問題，而且產生很多詭異的檔案 → 砍掉 boot-repair 以及產生的檔案 → 無法解決 → re-intall Ubuntu → 乾淨的 Ubuntu → boot option #1 設為 Linux → 開機選單 Windows 8.1 不見了 → Grub 重新設定並更新開機選單 → 選單出現 Windows → 進不去 → format Ubuntu → 電腦找不到任何 OS，直接進空蕩蕩的 grub command line → Windows 8 沒有 Recovery CD or Repair Disc → 使用 Ubuntu Live CD 找 tool 救回跟著 Ubuntu 一起被 format 的 MBR → 失敗 → 找另一台電腦燒修復磁碟 → 用修復磁碟 Reset Windows → 重開機仍舊直接進 grub command line → 使用修復磁碟進入 CMD rebuild MBR → 重開機仍舊直接進 grub command line → 進 BIOS 把開機選項第一個改為 Windows Boot Manager → Windows 啟動成功 → 進入乾淨的 Windows → 天亮了</p><h1 id="發生什麼事？"><a href="# 發生什麼事？" class="headerlink" title="發生什麼事？"></a>發生什麼事？</h1><ul><li>Windows Boot Manager 是 Windows 自帶的開機選單，有時候開機可以選安全模式或是其他版本的 Windows，那就是 Windows Boot Manager，如果 boot option #1 設定 Windows Boot Manager，他就會先去讀這套選單系統，因為 Ubuntu 是後裝的，所以 Windows Boot Manager 根本不知道有 Ubuntu (Windows 對其他 OS 不太友善，就算是先裝 Ubuntu 再裝 Windows，一樣會產生很多問題)，導致不會有選單就直接進去 Windows。</li><li>BIOS 的 Boot Option #1 如果設定 Linux，就會使用 Grub 或 Syslinux 開機選單系統，因為這套選單系統是安裝 Ubuntu 時裝的，所以他知道此電腦內有 Windows，自然就可以挑選 Windows or Ubuntu 登入。</li><li>想要控制選單的內容並不是去修改 boot option，那是讓你挑要用哪一套開機選單，如果想要改 Grub 選單的選項順序、等待時間或是預設選項，要去修改 Grub 的 config 檔。</li><li>為什麼 Windows 回復原廠狀態及 rebuild MBR 都失敗？因為 boot option #1 是 Linux，他跑去讀 Grub 當然空空如也 (因為 re-intall + format Ubuntu 導致 Grub 已經不知道變什麼鬼樣子)，當時如果把 boot option #1 改成 Windows Boot Manager 應該可以成功。</li></ul><h1 id="結論"><a href="# 結論" class="headerlink" title="結論"></a>結論 </h1><p> 切割磁區 → 光碟開機 → 安裝 Ubuntu → 進 BIOS 把 Boot Option #1 改成 Linux → 進 Ubuntu 調整 /boot/grub/grub.cfg 內的 OS 順序 → 結束</p><p><strong>如果做這種系統面的大變動，一定要先備份、建立還原點或是產生修復磁碟，可以省下非常多的時間，建立修復磁碟 (Windows Repair Media) 的功能躲在 控制台 &gt; 系統及安全性 &gt; 重要訊息中心 &gt; 復原 &gt; 建立修復磁碟機</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/06/24/windows-ubuntu-dual-boot/jimmy-page.jpg&quot; title=&quot;Jimmy Page&quot;&gt;

&lt;p&gt;明很簡單的東西，我硬要給人繞一大圈，真夠蠢的…&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="Linux" scheme="http://blog.marksylee.com/categories/Technique/Linux/"/>
    
    
      <category term="ubuntu" scheme="http://blog.marksylee.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 架設 Transmission</title>
    <link href="http://blog.marksylee.com/2016/06/24/transmission-on-centos7/"/>
    <id>http://blog.marksylee.com/2016/06/24/transmission-on-centos7/</id>
    <published>2016-06-24T07:12:07.000Z</published>
    <updated>2020-05-31T05:49:48.178Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/06/24/transmission-on-centos7/jeff-beck.jpg" title="Jeff Beck"><p>希望能夠在任意地點經由網頁上傳 torrent，Server 會自動下載檔案。</p><a id="more"></a><figure class="highlight bash"><figcaption><span>安裝 Transmission</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install transmission transmission-daemon</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>啟動再關閉，系統會自行產生設定檔</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start transmission-daemon</span><br><span class="line">systemctl stop transmission-daemon</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>設為開機即啟動</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> transmission-daemon</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>修改設定檔</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /var/lib/transmission/.config/transmission-daemon/settings.json</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>設定檔內修改登入資訊</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"rpc-authentication-required"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"rpc-password"</span>: <span class="string">"密碼"</span>,</span><br><span class="line"><span class="string">"rpc-username"</span>: <span class="string">"帳號"</span>,</span><br></pre></td></tr></table></figure><p>使用 Apache Proxy 導向 Transmission 所在的 port(可參考<a href="http://blog.marksylee.com/2016/06/24/apache-proxy-forward-reverse/">Apache mod_proxy</a>)。</p><figure class="highlight bash"><figcaption><span>修改 Apache 設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>在 port 80 的 VirtualHost 內加入以下內容</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RewriteRule /transmission[/]?$ /transmission/web [R=permanent]</span><br><span class="line">ProxyPass /transmission http://localhost:9091/transmission</span><br><span class="line">ProxyPassReverse /transmission http://localhost:9091/transmission</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>重啟服務</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start transmission-daemon</span><br><span class="line">systemctl start httpd.service</span><br></pre></td></tr></table></figure><p>連線至 <code>http://localhost/transmission</code> 即可登入使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/06/24/transmission-on-centos7/jeff-beck.jpg&quot; title=&quot;Jeff Beck&quot;&gt;

&lt;p&gt;希望能夠在任意地點經由網頁上傳torrent，Server會自動下載檔案。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="Linux" scheme="http://blog.marksylee.com/categories/Technique/Linux/"/>
    
    
      <category term="centos" scheme="http://blog.marksylee.com/tags/centos/"/>
    
      <category term="transmission" scheme="http://blog.marksylee.com/tags/transmission/"/>
    
  </entry>
  
  <entry>
    <title>Apache mod_proxy (Forward/Reverse)</title>
    <link href="http://blog.marksylee.com/2016/06/24/apache-proxy-forward-reverse/"/>
    <id>http://blog.marksylee.com/2016/06/24/apache-proxy-forward-reverse/</id>
    <published>2016-06-24T03:43:11.000Z</published>
    <updated>2020-05-31T05:49:48.135Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/06/24/apache-proxy-forward-reverse/eric-clapton.jpg" title="Eric Clapton"><p>為了物盡其用，我們總是在一台機器上架設很多網路服務，而這些服務通常都四散在各個 Port 上，例如在 80 上有 Apache HTTPd、Tomcat 占用著 8080、RStudio Server 又裝在 8787 上，用起來十分不方便。</p><a id="more"></a><h1 id="問題"><a href="# 問題" class="headerlink" title="問題"></a>問題 </h1><p><strong> 如何將不同 Port 上的服務整合到同一個 Port 上？</strong></p><p>舉例來說，我在 CentOS 7 上安裝了一套 RStudio Server，這是一款網頁式的 R 語言 IDE，該服務預設的 Port 是 8787，而我的 Port 80 上也已經在跑 WordPress 等服務，但是我希望能夠在不改 Port 的情況下用 URL 來區別兩個服務，像是用 <code>http://marksylee.com/rstudio</code> 可以連到 RStuidio Server，而不會影響到本來就正常運行的<code>http://marksylee.com/wordpress</code>。</p><h1 id="基礎知識"><a href="# 基礎知識" class="headerlink" title="基礎知識"></a>基礎知識 </h1><p> 容我發懶一下，TonyQ 大大已經很好心地把文件翻譯出來，請看<a href="https://www.ptt.cc/bbs/Web_Design/M.1226750420.A.3EB.html" target="_blank" rel="noopener">[心得] apache mod_proxy 介紹</a>。</p><h1 id="解決方法"><a href="# 解決方法" class="headerlink" title="解決方法"></a>解決方法 </h1><p> 基本上，CentOS 7 的 Apache 已經內建安裝了 mod_proxy，可以在 <code>/etc/httpd/conf/httpd.conf</code> 或<code>/etc/httpd/conf.modules.d/</code> 內找到，如果沒有，那可能需要安裝或啟用，請自行估狗。</p><p>首先，執行以下指令找找看是否有 <code>&lt;IfModule mod_proxy.c&gt;</code> 的標籤，如果有，請把標籤的內容反註解掉。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure><p>如果沒有相關的內容，請在文件結尾加入以下內容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_proxy.c&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;VirtualHost *:80&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;Proxy *&gt;</span><br><span class="line">            Allow from localhost</span><br><span class="line">        &lt;/Proxy&gt;</span><br><span class="line"> </span><br><span class="line">        ProxyPass /rstudio/ http://localhost:8787/</span><br><span class="line">        ProxyPassReverse /rstudio/ http://localhost:8787/</span><br><span class="line">        RedirectMatch permanent ^/rstudio$ /rstudio/</span><br><span class="line"> </span><br><span class="line">    &lt;/VirtualHost&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>完成後重啟 Apache</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd.service</span><br></pre></td></tr></table></figure><p>然後連進網址 <code>http://ip-address/rstudio</code> 看看有沒有通，如果出現 <code>503 Error (Service Unavailable)</code> 請不要驚慌，可能是 SELinux 在搞鬼，可參考<a href="http://babyhe.blog.51cto.com/1104064/636602/" target="_blank" rel="noopener">Apache ProxyPass 出现 503 Service Temporarily Unavailable 的解决方案</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/06/24/apache-proxy-forward-reverse/eric-clapton.jpg&quot; title=&quot;Eric Clapton&quot;&gt;

&lt;p&gt;為了物盡其用，我們總是在一台機器上架設很多網路服務，而這些服務通常都四散在各個Port上，例如在 80上有Apache HTTPd、Tomcat占用著8080、RStudio Server又裝在8787上，用起來十分不方便。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="Linux" scheme="http://blog.marksylee.com/categories/Technique/Linux/"/>
    
    
      <category term="apache" scheme="http://blog.marksylee.com/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>約翰霍普金斯大學 – 數據科學</title>
    <link href="http://blog.marksylee.com/2016/06/24/john-hopkins-data-science/"/>
    <id>http://blog.marksylee.com/2016/06/24/john-hopkins-data-science/</id>
    <published>2016-06-24T03:25:56.000Z</published>
    <updated>2020-05-31T05:49:48.147Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/06/24/john-hopkins-data-science/john-petrucci.jpg" title="John Petrucci"><p> 這是 Coursera 的專項課程，也就是說，它是由一系列的相關課程所組成，循序漸進地討論資料科學的概論、程式設計、統計、實用等面向，非常適合對資料科學 / 分析 / 探勘有興趣的人學習，重點是一切免費 (付費可取得證書及其他優惠)，美中不足的是後面難度較高的課程還沒有中文翻譯字幕。</p><a id="more"></a><h3 id="以下是課程資訊"><a href="# 以下是課程資訊" class="headerlink" title="以下是課程資訊"></a> 以下是課程資訊 </h3><p><a href="https://www.coursera.org/specialization/jhudatascience/1" target="_blank" rel="noopener">Johns Hopkins University - Data Science</a></p><p><em>Brian Caffo, Jeff Leek, Roger D. Peng</em></p><p><a href="https://www.coursera.org/course/datascitoolbox" target="_blank" rel="noopener">The Data Scientist’s Toolbox</a> (中) - 系列課程導論與工具介紹 <br><a href="https://www.coursera.org/course/rprog" target="_blank" rel="noopener">R Programming</a> (中) - R 程式設計 <br><a href="https://www.coursera.org/course/getdata" target="_blank" rel="noopener">Getting and Cleaning Data！</a> (中) - 獲取與清理資料 <br><a href="https://www.coursera.org/course/exdata" target="_blank" rel="noopener">Exploratory Data Analysis</a> (中) - 探索性資料分析 <br><a href="https://www.coursera.org/course/repdata" target="_blank" rel="noopener">Reproducible Research</a> (英) - 可重覆性資料分析 <br><a href="https://www.coursera.org/course/statinference" target="_blank" rel="noopener">Statistical Inference</a> (英) - 統計推論 <br><a href="https://www.coursera.org/course/regmods" target="_blank" rel="noopener">Regression Models</a> (英) - 回歸模型 <br><a href="https://www.coursera.org/course/predmachlearn" target="_blank" rel="noopener">Practical Machine Learning</a> (英) - 實用機器學習 <br><a href="https://www.coursera.org/course/devdataprod" target="_blank" rel="noopener">Developing Data Products</a> (英) - 資料產品開發 </p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/06/24/john-hopkins-data-science/john-petrucci.jpg&quot; title=&quot;John Petrucci&quot;&gt;

&lt;p&gt;這是 Coursera 的專項課程，也就是說，它是由一系列的相關課程所組成，循序漸進地討論資料科學的概論、程式設計、統計、實用等面向，非常適合對資料科學/分析/探勘有興趣的人學習，重點是一切免費(付費可取得證書及其他優惠)，美中不足的是後面難度較高的課程還沒有中文翻譯字幕。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="R" scheme="http://blog.marksylee.com/categories/Technique/R/"/>
    
    
      <category term="data science" scheme="http://blog.marksylee.com/tags/data-science/"/>
    
      <category term="moocs" scheme="http://blog.marksylee.com/tags/moocs/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 架設 WordPress</title>
    <link href="http://blog.marksylee.com/2016/06/23/wordpress-on-centos7/"/>
    <id>http://blog.marksylee.com/2016/06/23/wordpress-on-centos7/</id>
    <published>2016-06-23T09:04:17.000Z</published>
    <updated>2020-05-31T05:49:48.183Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/06/23/wordpress-on-centos7/carlos-santana.jpg" title="Carlos Santana"><p>網上已有非常豐富的 WordPress 架設教學，本篇稍微不同的是用 MariaDB 取代原先的 MySQL。</p><a id="more"></a><h1 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h1><figure class="highlight bash"><figcaption><span>安裝 MariaDB</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mariadb-server mariadb</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>開啟 MariaDB 且設定開機啟動</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb.service</span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb.service</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>MariaDB 基本設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>登入 MariaDB</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>建立 wp 資料庫</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> wp;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>建立使用者 wpuser</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> wpuser@localhost;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>設定密碼</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> wpuser@localhost= <span class="keyword">PASSWORD</span>(<span class="string">'密碼'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>wpuser 具有 wp 資料庫的完整權限</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> wp.* <span class="keyword">TO</span> wpuser@localhost <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure><h1 id="Apache-HTTPd"><a href="#Apache-HTTPd" class="headerlink" title="Apache HTTPd"></a>Apache HTTPd</h1><figure class="highlight bash"><figcaption><span>安裝 Apache HTTPd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>開啟 Apache 且設為開機啟動</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd.service</span><br><span class="line">systemctl <span class="built_in">enable</span> httpd.service</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>防火牆打開 http 和 https 的 port</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-service=http</span><br><span class="line">firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>此時可以試試看<code>http://ip</code>，看到 Apache 預設畫面表示成功。</p><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><figure class="highlight bash"><figcaption><span>安裝 PHP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install php</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>重啟 Apache</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd.service</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>寫一支 info 來看看 PHP 的狀況</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /var/www/html/info.php</span><br></pre></td></tr></table></figure><figure class="highlight php"><figcaption><span>檔案內容如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>試試看<code>http://ip/info.php</code>，看到畫面表示成功，從頁面上可以看到，並未安裝 MySQL 模組。</p><figure class="highlight bash"><figcaption><span>安裝 php 的 mysql 模組(mysql 模組跟 mariadb 相容)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install php-mysql</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>重啟 Apache</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd.service</span><br></pre></td></tr></table></figure><h1 id="phpMyAdmin"><a href="#phpMyAdmin" class="headerlink" title="phpMyAdmin"></a>phpMyAdmin</h1><figure class="highlight bash"><figcaption><span>安裝</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install phpMyAdmin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>編輯 phpMyAdmin 設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/httpd/conf.d/phpMyAdmin.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>把設定改成以下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">Alias /phpMyAdmin /usr/share/phpMyAdmin</span><br><span class="line">Alias /phpmyadmin /usr/share/phpMyAdmin</span><br><span class="line"> </span><br><span class="line"><span class="comment">#&lt;Directory /usr/share/phpMyAdmin/&gt;</span></span><br><span class="line"><span class="comment">#   &lt;IfModule mod_authz_core.c&gt;</span></span><br><span class="line"><span class="comment">#     # Apache 2.4</span></span><br><span class="line"><span class="comment">#     &lt;RequireAny&gt;</span></span><br><span class="line"><span class="comment">#       Require ip 127.0.0.1</span></span><br><span class="line"><span class="comment">#       Require ip ::1</span></span><br><span class="line"><span class="comment">#     &lt;/RequireAny&gt;</span></span><br><span class="line"><span class="comment">#   &lt;/IfModule&gt;</span></span><br><span class="line"><span class="comment">#   &lt;IfModule !mod_authz_core.c&gt;</span></span><br><span class="line"><span class="comment">#     # Apache 2.2</span></span><br><span class="line"><span class="comment">#     Order Deny,Allow</span></span><br><span class="line"><span class="comment">#     Deny from All</span></span><br><span class="line"><span class="comment">#     Allow from 127.0.0.1</span></span><br><span class="line"><span class="comment">#     Allow from ::1</span></span><br><span class="line"><span class="comment">#   &lt;/IfModule&gt;</span></span><br><span class="line"><span class="comment">#&lt;/Directory&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;Directory /usr/share/phpMyAdmin/&gt;</span><br><span class="line">        Options none</span><br><span class="line">        AllowOverride Limit</span><br><span class="line">        Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"> </span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>修改 phpMyAdmin 認證方式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/phpMyAdmin/config.inc.php</span><br></pre></td></tr></table></figure><p>將原本的 <code>$cfg[&#39;Servers&#39;][$i][&#39;auth_type&#39;]=&#39;cookie&#39;;</code> 改成<code>$cfg[&#39;Servers&#39;][$i][&#39;auth_type&#39;]=&#39;http&#39;;</code>。</p><figure class="highlight bash"><figcaption><span>重啟 Apache</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart  httpd.service</span><br></pre></td></tr></table></figure><p>進入 <code>http://ip/phpmyadmin</code> 輸入帳號密碼，看到畫面表示成功，進入 wp 資料庫，把編碼改為<code>utf8_unicode_ci</code>。</p><h1 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h1><figure class="highlight bash"><figcaption><span>下載及安裝</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html</span><br><span class="line">wget https://tw.wordpress.org/wordpress-4.5.2-zh_TW.tar.gz</span><br><span class="line">tar -xzvf wordpress-4.5.2-zh_TW.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>設定擁有者與權限並重啟 Apache</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown -R apache:apache /var/www/html/WordPress</span><br><span class="line">chmod -R 755 /var/www/html/WordPress</span><br><span class="line">systemctl restart httpd.service</span><br></pre></td></tr></table></figure><p>試試看 <code>http://ip/WordPress</code> 能否連入，如果可以就能開始設定你的 WordPress 了！</p><figure class="highlight bash"><figcaption><span>如果無法從網站寫入 wp_config.php，可以手動寫入</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html/WordPress/</span><br><span class="line">cp wp-config-sample.php wp-config.php</span><br><span class="line">vi wp-config.php</span><br></pre></td></tr></table></figure><figure class="highlight php"><figcaption><span>設定如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ** MySQL settings - You can get this info from your web host ** //</span></span><br><span class="line"><span class="comment">/** The name of the database for WordPress */</span></span><br><span class="line">define(<span class="string">'DB_NAME'</span>, <span class="string">'資料庫名稱'</span>); <span class="comment">// wp</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/** MySQL database username */</span></span><br><span class="line">define(<span class="string">'DB_USER'</span>, <span class="string">'資料庫登入帳號'</span>); <span class="comment">// wpuser</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/** MySQL database password */</span></span><br><span class="line">define(<span class="string">'DB_PASSWORD'</span>, <span class="string">'資料庫登入密碼'</span>); <span class="comment">// 密碼</span></span><br></pre></td></tr></table></figure><p>WordPress 安裝完後，可以將 <code>phpMyAdmin.conf</code> 改回預設值，這樣非本機就不能登入 phpMyAdmin，以提升安全性。</p><figure class="highlight bash"><figcaption><span>將 WordPress 資料夾給 Apache，並賦予權限</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chrown apache:apache /your/WordPress/folder/</span><br><span class="line">find /your/WordPress/folder/ -<span class="built_in">type</span> d -<span class="built_in">exec</span> chmod 755 &#123;&#125;</span><br><span class="line">find /your/WordPress/folder/ -<span class="built_in">type</span> f -<span class="built_in">exec</span> chmod 644 &#123;&#125;</span><br></pre></td></tr></table></figure><p>若發生<code>not found 404</code>，可參考<a href="http://forums.cpanel.net/f5/where-set-allowoverride-all-htacess-222882.html" target="_blank" rel="noopener">Where to set AllowOverride All for .htacess?</a>，應該是 Apache 沒有打開 override 功能。</p><p>其他安全相關設定，可參考 <a href="http://free.com.tw/improve-wordpress-security/" target="_blank" rel="noopener">9 個提升 WordPress 網站安全性的方法</a> 跟<a href="http://free.com.tw/wordpress-htaccess-tips-and-tricks/" target="_blank" rel="noopener">11 個強化 WordPress 網站安全的 .Htaccess 設定技巧</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/06/23/wordpress-on-centos7/carlos-santana.jpg&quot; title=&quot;Carlos Santana&quot;&gt;

&lt;p&gt;網上已有非常豐富的WordPress架設教學，本篇稍微不同的是用MariaDB取代原先的MySQL。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="Linux" scheme="http://blog.marksylee.com/categories/Technique/Linux/"/>
    
    
      <category term="centos" scheme="http://blog.marksylee.com/tags/centos/"/>
    
      <category term="wordpress" scheme="http://blog.marksylee.com/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 初始化設定</title>
    <link href="http://blog.marksylee.com/2016/06/23/centos7-init-conf/"/>
    <id>http://blog.marksylee.com/2016/06/23/centos7-init-conf/</id>
    <published>2016-06-23T04:24:52.000Z</published>
    <updated>2020-05-31T05:49:48.137Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/06/23/centos7-init-conf/tak-matsumoto.jpg" title="Tak Matsumoto"><p>CentOS 7 安裝方式很簡單，所以就不再贅述，如果想要教學指南可參考<a href="http://blog.xuite.net/tolarku/blog/231550320-CentOS+7+%E5%AE%89%E8%A3%9D" target="_blank" rel="noopener">CentOS 7 安裝</a>，本篇只介紹安裝完後設定的指令。</p><a id="more"></a><h1 id="帳號及密碼"><a href="# 帳號及密碼" class="headerlink" title="帳號及密碼"></a>帳號及密碼 </h1><h3 id="變更 root 密碼："><a href="# 變更 root 密碼：" class="headerlink" title="變更 root 密碼："></a> 變更 root 密碼：</h3><p>如果你在圖形化介面安裝時 CentOS 時已經有設定 root 密碼，其實可以跳過這個步驟，但是如果你的 root 密碼是使用預設，請務必、一定要在登入的第一時間修改密碼。</p><figure class="highlight bash"><figcaption><span>修改 root 密碼</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><h3 id="新增使用者帳號："><a href="# 新增使用者帳號：" class="headerlink" title="新增使用者帳號："></a>新增使用者帳號：</h3><p>因為安全性考量，在玩弄 CentOS 時非常不建議使用 root 帳號，非常容易出人命，所以新建一個帳號來玩耍，如果有需要 root 權限，再使用 sudo 就好了。</p><figure class="highlight bash"><figcaption><span>新增使用者(user01)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser user01</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>設定密碼</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd user01</span><br></pre></td></tr></table></figure><h1 id="安裝及設定套件"><a href="# 安裝及設定套件" class="headerlink" title="安裝及設定套件"></a>安裝及設定套件 </h1><h3 id="檢查 yum 是否安裝"><a href="# 檢查 yum 是否安裝" class="headerlink" title="檢查 yum 是否安裝"></a> 檢查 yum 是否安裝</h3><p>yum 套件非常強大，專司 package 的安裝、更新、移除等工作。</p><figure class="highlight shell"><figcaption><span>檢查 yum 是否已安裝</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep yum</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>如果有類似以下的內容表示已有安裝 yum</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum-metadata-parser-1.1.4-10.el7.x86_64</span><br><span class="line">yum-cron-3.4.3-118.el7.centos.noarch</span><br><span class="line">yum-3.4.3-118.el7.centos.noarch</span><br><span class="line">yum-plugin-fastestmirror-1.1.31-25.el7_0.noarch</span><br></pre></td></tr></table></figure><h3 id="安裝 sudo"><a href="# 安裝 sudo" class="headerlink" title="安裝 sudo"></a>安裝 sudo</h3><p>權限管理套件，能暫時得到 root 權限。</p><figure class="highlight bash"><figcaption><span>檢查是否已安裝</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed | grep sudo</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>安裝 sudo</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install sudo</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>修改 sudo 設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sudoers</span><br></pre></td></tr></table></figure><p>在 <code>root ALL=(ALL) ALL</code> 下面複製一樣的內容，並把 <code>root</code> 改為帳號，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user01 ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><p>或是希望使用 sudo 時免輸入密碼</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user01 ALL=(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure><p><em>以下所有動作都應該使用 sudo 或是先切換成 root 身分操作喔！</em></p><h3 id="禁止 root 使用 ssh 登入"><a href="# 禁止 root 使用 ssh 登入" class="headerlink" title="禁止 root 使用 ssh 登入"></a>禁止 root 使用 ssh 登入 </h3><p> 避免有心人士得到 root 密碼後進去搞破壞，所以乾脆不要打開 root 的 ssh。</p><figure class="highlight bash"><figcaption><span>修改 ssh 設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到 <code>#PermitRootLogin yes</code> 取消註解，並把 <code>yes</code> 改為<code>no</code>。</p><h3 id="變更 ssh-port"><a href="# 變更 ssh-port" class="headerlink" title="變更 ssh port"></a>變更 ssh port</h3><p>ssh 的 port 預設為<strong>22</strong>，很常成為攻擊的目標，避免不必要的麻煩可以把它改掉。</p><figure class="highlight bash"><figcaption><span>修改 ssh 設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到 <code>#Port 22</code> 取消註解並改成你想要的阜號 (1024 – 65535，為避免衝突請先參考<a href="https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers" target="_blank" rel="noopener"> 這裡</a>)</p><figure class="highlight bash"><figcaption><span>重啟 ssh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><h3 id="安裝及設定 -firewalld"><a href="# 安裝及設定 -firewalld" class="headerlink" title="安裝及設定 firewalld"></a>安裝及設定 firewalld</h3><p>firewalld 是 CentOS 7 預設的防火牆使用者介面，安裝後可以查看防火牆狀態，雖然介面是 firewalld，底層仍然是 iptables。</p><figure class="highlight bash"><figcaption><span>使用 yum 來安裝</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install firewalld</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>修改設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/firewalld/services/ssh.xml</span><br></pre></td></tr></table></figure><p>讓新的 ssh port 可以通過防火牆，把原本的 <code>port=&quot;22″</code> 改為你設定的阜號</p><figure class="highlight bash"><figcaption><span>重載</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="安裝及設定 -fail2ban"><a href="# 安裝及設定 -fail2ban" class="headerlink" title="安裝及設定 fail2ban"></a>安裝及設定 fail2ban</h3><p>有些無聊人士會使用暴力破解法去猜登入密碼，為了避免這種問題，所以使用 fail2ban 來讓短時間登入失敗次數過多的 ip 被封鎖。</p><figure class="highlight bash"><figcaption><span>用 yum 安裝套件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install fail2ban</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>如果失敗，可能因為套件不在套件褲內，先執行以下指令，再用 yum 安裝</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>修改 log 設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/fail2ban/fail2ban.conf</span><br></pre></td></tr></table></figure><p>把 <code>#logtarget = SYSLOG</code> 取消註解並更改路徑為<code>/var/log/fail2ban.log</code></p><figure class="highlight bash"><figcaption><span>設定封鎖規則</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/fail2ban/jail.conf  /etc/fail2ban/jail.local</span><br><span class="line">vi /etc/fail2ban/jail.local</span><br></pre></td></tr></table></figure><p>找到<code>[sshd]</code>，在他前面新增規則如下</p><figure class="highlight bash"><figcaption><span>登入失敗連續 3+1 次，封鎖 43200 秒</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ssh-iptables]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">filter = sshd</span><br><span class="line">logpath = /var/<span class="built_in">log</span>/secure</span><br><span class="line">maxretry = 3</span><br><span class="line">bantime = 43200</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>在任何提示模式自動啟動服務</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig fail2ban on</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>啟動服務</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service fail2ban start</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>如果沒有作用請執行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart fail2ban.service</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>檢查 ssh 的封鎖狀態</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fail2ban-client status sshd</span><br></pre></td></tr></table></figure><h3 id="誤鎖救援方式"><a href="# 誤鎖救援方式" class="headerlink" title="誤鎖救援方式"></a>誤鎖救援方式 </h3><figure class="highlight bash"><figcaption><span> 查看規則，應該可以找到名為 f2b-ssh-iptables 的 chain</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -L</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>查看被 f2b-ssh-iptables 規則所封鎖的 IP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables f2b-ssh-iptables -L</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>解除封鎖，結尾的 N 表示第幾個 IP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -D f2b-ssh-iptables N</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/06/23/centos7-init-conf/tak-matsumoto.jpg&quot; title=&quot;Tak Matsumoto&quot;&gt;

&lt;p&gt;CentOS 7安裝方式很簡單，所以就不再贅述，如果想要教學指南可參考&lt;a href=&quot;http://blog.xuite.net/tolarku/blog/231550320-CentOS+7+%E5%AE%89%E8%A3%9D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CentOS 7安裝&lt;/a&gt;，本篇只介紹安裝完後設定的指令。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="Linux" scheme="http://blog.marksylee.com/categories/Technique/Linux/"/>
    
    
      <category term="centos" scheme="http://blog.marksylee.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>ADSL 固定 IP 及數據機硬體撥接</title>
    <link href="http://blog.marksylee.com/2016/06/23/static-ip-modem-pppoe/"/>
    <id>http://blog.marksylee.com/2016/06/23/static-ip-modem-pppoe/</id>
    <published>2016-06-23T03:52:48.000Z</published>
    <updated>2020-05-31T05:49:48.168Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/06/23/static-ip-modem-pppoe/yngwie-johann-malmsteen.jpg" title="Yngwie Johann Malmsteen"><p>現在 ISP(網路服務供應商)基本上都能夠申請固定 IP，以 Hinet ADSL 為例，通常一組 ADSL 帳號同時可以使用 8 個浮動 IP 或是一個固定 IP 加上七個浮動 IP，也就是說，可以有八台電腦使用同一個帳號，各自使用 PPPoE 撥號連線上網路。</p><a id="more"></a><h1 id="向 ISP 申請固定 IP"><a href="# 向 ISP 申請固定 IP" class="headerlink" title="向 ISP 申請固定 IP"></a>向 ISP 申請固定 IP</h1><p>中華電信有提供這個服務，詳情請去 <a href="http://service.hinet.net/2004/adslstaticip.php" target="_blank" rel="noopener"> 申請固定 IP 配發服務 </a> 填寫資料，系統馬上就會給你一組固定 IP，但要注意，這組 IP 有可能因為維修或其他原因暫時停止或變換，他都會用 email 通知。</p><h1 id="由數據機使用固定 IP 自動連線"><a href="# 由數據機使用固定 IP 自動連線" class="headerlink" title="由數據機使用固定 IP 自動連線"></a>由數據機使用固定 IP 自動連線 </h1><p> 首先把電腦設定改成：</p><ul><li>IP - <strong>192.168.1.2</strong></li><li>子網路遮罩 - <strong>255.255.255.0</strong></li><li>預設閘道 - <strong>192.168.1.1</strong></li><li>慣用 DNS 伺服器位址 - <strong>192.168.1.1</strong> (或 google 的<strong>8.8.8.8</strong>)</li></ul><p>將電腦接上數據機，在瀏覽器打入<strong>192.168.1.1</strong>，會彈出帳號密碼視窗，輸入後即可進入 D-link 畫面。</p><ul><li>光世代數據機：帳號 <strong>cht</strong> 密碼<strong>chtnvdsl</strong>(北區)、<strong>chtcvdsl</strong>(中區)、<strong>chtsvdsl</strong>(南區)</li><li>ADSL 數據機：帳號 <strong>cht</strong> 密碼<strong>chtnadsl</strong>(北區)、<strong>chtcadsl</strong>(中區)、<strong>chtsadsl</strong>(南區)</li></ul><p>上方選單點選 <strong>Setup→WAN Setup→Add→PPPoE</strong>，下方輸入上網的帳號密碼(Hinet 給的帳號卡)，要特別注意的是，如果你想使用浮動 IP 連線的話，直接照著卡上輸入即可，但是，如果你想使用剛剛申請的固定 IP 來連線，就需要把後方的<strong>hinet.net</strong> 改成<strong>ip.hinet.net</strong>。</p><h1 id="其他設定"><a href="# 其他設定" class="headerlink" title="其他設定"></a>其他設定 </h1><p> 進入 <strong>LAN Setup</strong> 啟用 <strong>DHCP</strong>，建議<strong>Start IP Address</strong> 要預留幾個，例如設定從 <strong>192.168.1.100</strong> 開始。</p><p>WHY？例如你目前使用的這台電腦，IP 已經設定為 192.168.1.2，其實就可以放著不用再改回自動取得，這樣以後這台電腦在區網的 IP 就是這個，在區網內的其他電腦想遠端這台電腦也不用每次都去查 IP。但是啟用 DHCP 的話，數據機會自動給那些沒有設定的電腦一組 IP，你如果沒有把 192.168.1.2 先預留下來，可能就會被衝到。</p><p>如果有 WiFi AP 還要再進入你 WiFi AP 的設定畫面，選擇 <strong>Setup→WAN Setup</strong>，把原本用 PPPoE 連線改成固定 IP(Static IP) 連線，否則 WiFi AP 會再撥號一次，那就不會在同一個區域內了。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/06/23/static-ip-modem-pppoe/yngwie-johann-malmsteen.jpg&quot; title=&quot;Yngwie Johann Malmsteen&quot;&gt;

&lt;p&gt;現在ISP(網路服務供應商)基本上都能夠申請固定IP，以Hinet ADSL為例，通常一組ADSL帳號同時可以使用8個浮動IP或是一個固定IP加上七個浮動IP，也就是說，可以有八台電腦使用同一個帳號，各自使用PPPoE撥號連線上網路。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="Misc" scheme="http://blog.marksylee.com/categories/Technique/Misc/"/>
    
    
      <category term="adsl" scheme="http://blog.marksylee.com/tags/adsl/"/>
    
  </entry>
  
  <entry>
    <title>R 語言學習資源</title>
    <link href="http://blog.marksylee.com/2016/06/22/r-lang/"/>
    <id>http://blog.marksylee.com/2016/06/22/r-lang/</id>
    <published>2016-06-22T09:48:34.000Z</published>
    <updated>2020-05-31T05:49:48.159Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/06/22/r-lang/eddie-van-halen.jpg" title="Eddie Van Halen"><p><a href="https://www.ptt.cc/bbs/R_Language/M.1382251406.A.957.html" target="_blank" rel="noopener">PTT 置底 </a><br><a href="https://www.ptt.cc/bbs/R_Language/M.1364963864.A.2AC.html" target="_blank" rel="noopener">PTT - R 的中文書</a><br><a href="http://www.biosino.org/R/R-doc/files/R4beg_cn_2.0.pdf" target="_blank" rel="noopener">R for beginner</a><br><a href="http://www.biosino.org/pages/newhtm/r/tchtml/index.html#Top" target="_blank" rel="noopener">R 導論中文指南</a><br><a href="https://github.com/programmermagazine/201303/blob/master/source/article3.md" target="_blank" rel="noopener">R 統計軟體：簡介與基本操作</a><br><a href="http://ccckmit.wikidot.com/r:main" target="_blank" rel="noopener">R 統計軟體</a><br><a href="http://ccckmit.wikidot.com/st:main" target="_blank" rel="noopener"> 機率與統計 (使用 R 軟體)</a><br><a href="http://web.ntpu.edu.tw/~cflin/Teach/R/R06EN05Expression.pdf" target="_blank" rel="noopener"> 常用的 R 程式語言 </a><br><a href="https://www.youtube.com/watch?v=dFq4bRUQmbw" target="_blank" rel="noopener"> 台大教學影片 </a><br><a href="https://www.youtube.com/channel/UCBBwy_xvVsM5iLB5dJZDqog" target="_blank" rel="noopener">TW-Use-R 教學影片</a><br><a href="http://personlin.pixnet.net/blog/post/30815304" target="_blank" rel="noopener">R 統計軟體安裝與使用投影片</a><br><a href="http://programmermagazine.github.io/201309/htm/article6.html" target="_blank" rel="noopener">R 和 Shiny 製作網頁應用</a><br><a href="https://www.kaggle.com/c/facial-keypoints-detection/details/getting-started-with-r" target="_blank" rel="noopener">Kaggle - Facial Keypoints Detection</a><br><a href="http://www.everdark.info/2013/12/r.html" target="_blank" rel="noopener"> 有趣的 Blog</a><br><a href="http://rseek.org/" target="_blank" rel="noopener">RSeek - search engine</a><br><a href="http://www.r-bloggers.com/" target="_blank" rel="noopener">R-Bloggers</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2016/06/22/r-lang/eddie-van-halen.jpg&quot; title=&quot;Eddie Van Halen&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ptt.cc/bbs/R_Language/M.1382251406.A.957
      
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="R" scheme="http://blog.marksylee.com/categories/Technique/R/"/>
    
    
      <category term="resource" scheme="http://blog.marksylee.com/tags/resource/"/>
    
  </entry>
  
  <entry>
    <title>Tika PDFBox 讀取繁體中文編碼錯誤</title>
    <link href="http://blog.marksylee.com/2016/06/22/tika-pdfbox-cht-error/"/>
    <id>http://blog.marksylee.com/2016/06/22/tika-pdfbox-cht-error/</id>
    <published>2016-06-22T09:22:09.000Z</published>
    <updated>2020-05-31T05:49:48.174Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/06/22/tika-pdfbox-cht-error/the-beatles-abbey-road.jpg" title="The Beatles - Abbey Road"><p>最近遇到個詭異的問題，就是當 Tika 去解析 PDF 文件時，如果文件有使用特定編碼(ETenms-B5)，就會解析出亂碼，Tika 解析 PDF 的部分是使用 PDFBox，而我遇到的問題也正好是存在已久的 PDFBox bug。</p><a id="more"></a><h1 id="問題"><a href="# 問題" class="headerlink" title="問題"></a>問題</h1><p>PDFBox 在解析檔案時，若該 PDF 含有 ETenms-B5-H 編碼，則會解析出亂碼。</p><h1 id="基礎知識"><a href="# 基礎知識" class="headerlink" title="基礎知識"></a>基礎知識</h1><p>PDF 的預設字集是 Adobe 公司自行編碼的<strong>CID 字集</strong>，不是大家通用的萬國碼 Unicode，所以在讀取內容時，會先透過一個叫做 CMap 的檔案，對映到 CID 字集，以便在顯示的時取得正確的字形。</p><p>舉例來說，ETenms-B5-H 的 CMap，裡面描述的是怎麼把 ETenms-B5-H 的編碼對應到 CID 編碼，這樣 PDF 檔案如果包含 ETenms-B5-H 的編碼，開啟檔案時就會透過 CMap 得到 CID 編碼並秀出正確的字。</p><p>ETenms-B5-H、ETenms-B5-V 是倚天輸入法以 BIG5 為基礎發展的擴充集(V 為垂直書寫、H 為水平)，基本上使用細明體、新細明體、標楷體等都有可能會用到它，所以要多注意，這個編碼方式是繁體中文專用，所以基本上只有台灣等地會用到。</p><h1 id="解決方法"><a href="# 解決方法" class="headerlink" title="解決方法"></a>解決方法 </h1><p> 我將 PDFBox 的 jar 檔解壓縮後，檢查裡面的 CMap，發現 PDFBox 內確實有 ETenms-B5-H 的 CMap 對應檔(否則執行過程中會報錯)，但是內容殘缺不全，所以我就拿在同位址下另一個倚天的編碼 ETen-B5-H 內容複製過去把內文中的 ETen-B5-H 改成 ETenms-B5-H，重新封裝 jar 檔，就能夠順利解析了。</p><p>註：ETen-B5-H 和 ETenms-B5-H 一樣，但 ETenms-B5-H 將半寬的拉丁字符替換成比例字符。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/06/22/tika-pdfbox-cht-error/the-beatles-abbey-road.jpg&quot; title=&quot;The Beatles - Abbey Road&quot;&gt;

&lt;p&gt;最近遇到個詭異的問題，就是當Tika去解析PDF文件時，如果文件有使用特定編碼(ETenms-B5)，就會解析出亂碼，Tika解析PDF的部分是使用PDFBox，而我遇到的問題也正好是存在已久的PDFBox bug。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://blog.marksylee.com/categories/Technique/"/>
    
      <category term="Java" scheme="http://blog.marksylee.com/categories/Technique/Java/"/>
    
    
      <category term="apache" scheme="http://blog.marksylee.com/tags/apache/"/>
    
      <category term="library" scheme="http://blog.marksylee.com/tags/library/"/>
    
  </entry>
  
</feed>
